{
	"info": {
		"licenseUrl": "https://developer.cisco.com",
		"termsOfServiceUrl": "http://www.cisco.com/web/siteassets/legal/terms_condition.html",
		"description": "REST API (EFT)",
		"license": "Cisco DevNet",
		"title": "Cisco DNA Center Platform v. 1.2.x (EFT)"
		},
	"swagger": "2.0",
	"tags": [],
	"schemes": [],
	"paths": {
		"/api/v1/global-credential/snmpv2-read-community": {
			"post": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Creates global SNMP read community",
				"description": "This method is used to add global SNMP read community",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvReadCommunityDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Updates global SNMP read community",
				"description": "This method is used to update global SNMP read community",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvReadCommunityDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/global-credential/http-read": {
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Updates global HTTP Read credential",
				"description": "This method is used to update global HTTP Read credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/HTTPReadCredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Creates global HTTP read credentials",
				"description": "This method is used to add HTTP read credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/HTTPReadCredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/global-credential/cli": {
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Updates global CLI credential",
				"description": "This method is used to update global CLI credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CLICredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Creates global CLI credential",
				"description": "This method is used to add global CLI credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CLICredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/global-credential/snmpv3": {
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Updates global SNMPv3 credential",
				"description": "This method is used to update global SNMPv3 credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvCredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Creates global SNMPv3 credential",
				"description": "This method is used to add global SNMPv3 credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvCredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/functional-capability": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves all functional-capability of devices",
				"description": "Gets the functional-capability for given devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Accepts comma separated deviceid's and return list of functional-capabilities for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "functionName",
						"description": "functionName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FunctionalCapabilityListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/{networkDeviceId}/config": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves device config",
				"description": "Gets the device config by device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "networkDeviceId",
						"description": "networkDeviceId",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SuccessResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/brief": {
			"put": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Updates network device role",
				"description": "Updates the role of the device as access, core, distribution, border router",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NetworkDeviceBriefNIO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/autocomplete": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves all network devices",
				"description": "Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id's and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "vrfName",
						"description": "vrfName",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "managementIpAddress",
						"description": "managementIpAddress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "hostname",
						"description": "hostname",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "macAddress",
						"description": "macAddress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "family",
						"description": "family",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "collectionStatus",
						"description": "collectionStatus",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "collectionInterval",
						"description": "collectionInterval",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareVersion",
						"description": "softwareVersion",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareType",
						"description": "softwareType",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "reachabilityStatus",
						"description": "reachabilityStatus",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "reachabilityFailureReason",
						"description": "reachabilityFailureReason",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "errorCode",
						"description": "errorCode",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "platformId",
						"description": "platformId",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "series",
						"description": "series",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serialNumber",
						"description": "serialNumber",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "upTime",
						"description": "upTime",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "role",
						"description": "role",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "roleSource",
						"description": "roleSource",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "associatedWlcIp",
						"description": "associatedWlcIp",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RetrievesAllNetworkDevicesResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device": {
			"post": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Network device POST api",
				"description": "Adds the device with given credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InventoryDeviceInfo"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Network device sync api",
				"description": "Sync the devices provided as input",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InventoryDeviceInfo"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves all network devices",
				"description": "Gets the list of first 500 network devices sorted lexicographically based on host name. It can be filtered using management IP address, mac address, hostname and location name. If id param is provided, it will be returning the list of network-devices for the given id's and other request params will be ignored. In case of autocomplete request, returns the list of specified attributes.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "hostname",
						"description": "hostname",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "managementIpAddress",
						"description": "managementIpAddress",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "macAddress",
						"description": "macAddress",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "locationName",
						"description": "locationName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "serialNumber",
						"description": "serialNumber",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "location",
						"description": "location",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "family",
						"description": "family",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "type",
						"description": "type",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "series",
						"description": "series",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "collectionStatus",
						"description": "collectionStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "collectionInterval",
						"description": "collectionInterval",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "notSyncedForMinutes",
						"description": "notSyncedForMinutes",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "errorCode",
						"description": "errorCode",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "errorDescription",
						"description": "errorDescription",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "softwareVersion",
						"description": "softwareVersion",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "softwareType",
						"description": "softwareType",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "platformId",
						"description": "platformId",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "role",
						"description": "role",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "reachabilityStatus",
						"description": "reachabilityStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "upTime",
						"description": "upTime",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "associatedWlcIp",
						"description": "associatedWlcIp",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "license.name",
						"description": "licenseName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "license.type",
						"description": "licenseType",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "license.status",
						"description": "licenseStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+name",
						"description": "moduleName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+equpimenttype",
						"description": "moduleEqupimentType",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+servicestate",
						"description": "moduleServiceState",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+vendorequipmenttype",
						"description": "moduleVendorEquipmentType",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+partnumber",
						"description": "modulePartNumber",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "module+operationstatecode",
						"description": "moduleOperationStateCode",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "id",
						"description": "Accepts comma separated id's and return list of network-devices for the given id's. If invalid or not-found id's are provided, null entry will be returned in the list.",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{id}/autoComplete": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieve autoComplete values from a discovery based on id",
				"description": "Gets the autoComplete values from a discovery job",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "ipAddress",
						"description": "ipAddress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "pingStatus",
						"description": "pingStatus",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "snmpStatus",
						"description": "snmpStatus",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "cliStatus",
						"description": "cliStatus",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "netconfStatus",
						"description": "netconfStatus",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "httpStatus",
						"description": "httpStatus",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SuccessResultList"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/network-device/{deviceId}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves device interfaces",
				"description": "Gets list of interfaces for the given device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{id}/network-device/count": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves the number of network devices discovered in the discovery specified by id",
				"description": "Gets the count of network devices discovered in the given discovery",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{id}": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves the discovery specified by id",
				"description": "Gets discovery by ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DiscoveryNIOResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Deletes the discovery specified by id",
				"description": "Stops the discovery for the given ID and removes it",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/isis": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves ISIS interfaces",
				"description": "Gets the interfaces that has ISIS enabled",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device-poller/cli/read-request": {
			"post": {
				"operationId": "",
				"tags": ["Command Runner"],
				"summary": "Run read-only commands on devices to get their real-time configuration",
				"description": "Submit request for read-only CLIs",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CommandRunnerDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/task/{taskId}": {
			"get": {
				"operationId": "",
				"tags": ["Task"],
				"summary": "getTruststoreFileCount",
				"description": "This method is used to retrieve a task based on their id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "taskId",
						"description": "UUID of the Task",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskDTOResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "No task corresponding to the id was found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/topology/vlan/vlan-names": {
			"get": {
				"operationId": "",
				"tags": ["Networks"],
				"summary": "getVlanNames",
				"description": "This method is used to obtain the list of vlan names",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/VlanNamesResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/image/activation/device": {
			"post": {
				"operationId": "",
				"tags": ["SWIM"],
				"summary": "Trigger activation on a device",
				"description": "Performs activation of an image on a given device.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ActivateDTO"
						},
						"in": "body"
					},
					{
						"name": "Client-Type",
						"description": "Client-type (Optional)",
						"required": false,
						"type": "string",
						"in": "header"
					},
					{
						"name": "Client-Url",
						"description": "Client-url (Optional)",
						"required": false,
						"type": "string",
						"in": "header"
					},
					{
						"name": "scheduleValidate",
						"description": "scheduleValidate, validates data before schedule (Optional)",
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/flow-analysis": {
			"get": {
				"operationId": "",
				"tags": ["Path Trace"],
				"summary": "Retrieves a summary of all flow analyses stored",
				"description": "Retrieves a summary of all flow analyses stored. Filters the results by given parameters.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "periodicRefresh",
						"description": "Is analysis periodically refreshed?",
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "sourceIP",
						"description": "Source IP address",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "destIP",
						"description": "Destination IP adress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sourcePort",
						"description": "Source port",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "destPort",
						"description": "Destination port",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "gtCreateTime",
						"description": "Analyses requested after this time",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "ltCreateTime",
						"description": "Analyses requested before this time",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "protocol",
						"description": "Protocol",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "status",
						"description": "Status",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "taskId",
						"description": "Task ID",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "lastUpdateTime",
						"description": "Last update time",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "Number of resources returned",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Start index of resources returned (1-based)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Order by this field",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort by this field",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FlowAnalysisListOutput"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "No correspoding flow analysis result for requested Id"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Path Trace"],
				"summary": "Initiates a new flow analysis",
				"description": "Initiates a new flow analysis with periodic refresh and stat collection options. Returns a request id and a task id to get results and follow progress.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/FlowAnalysisRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FlowAnalysisRequestResultOutput"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/unclaim": {
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Un-Claim Device",
				"description": "This API is used to unassign the project and workflow from one or more device.A device can only be unclaimed if it has not begun provisioning.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/UnclaimRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UnClaimDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-settings/savacct": {
			"put": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Edit PnP Server Profile",
				"description": "This API is used to edit the PnP Server profile in a registered Virtual Account in the PnP database.The edited smart & virtual account info is returned in the response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SAVAMapping"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/EditPnPServerProfileResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Add Virtual Account",
				"description": "This API is used to register a Smart Account, Virtual Account and the relevant server profile info with the PnP System & database. The devices present in the registered virtual account are synced with the PnP database as well. The new profile is returned in the response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SAVAMapping"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/AddVirtualAccountResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/reset": {
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Reset Device",
				"description": "This API is used to recover a device from a Workflow Execution Error state.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ResetRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ResetDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/template-programmer/template": {
			"get": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Gets the templates available depending on the criteria",
				"description": "Gets the templates available depending on the criteria",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"description": "projectId",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareType",
						"description": "softwareType",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "softwareVersion",
						"description": "softwareVersion",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productFamily",
						"description": "productFamily",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productSeries",
						"description": "productSeries",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "productType",
						"description": "productType",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "includeHead",
						"description": "includeHead",
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "filterConflictingTemplates",
						"description": "filterConflictingTemplates",
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CollectionTemplateInfo"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Update Template",
				"description": "API to update a template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/template-programmer/template/version/{templateId}": {
			"get": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Gets all the versions of a given template",
				"description": "Get all the versions of template",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "templateId",
						"description": "templateId",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CollectionTemplateInfo"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/client-health": {
			"get": {
				"operationId": "",
				"tags": [
					"Intent: API",
					"Intent: Clients",
					"Intent: Health"
				],
				"summary": "Client Health",
				"description": "Get overall Client Health along with beak down on categories of wired and wireless",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "startTime",
						"description": "Start Time",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "End Time",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ClientHealthResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device": {
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Create Device",
				"description": "This API is used to add a Planned device to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Device"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "List devices",
				"description": "This API is used to get the list of devices that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 devices.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "limit",
						"description": "Limits number of results",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Index of first result",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "sort",
						"description": "Comma seperated list of fields to sort on",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (des)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serialNumber",
						"description": "Device Serial Number",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"description": "Device State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "onbState",
						"description": "Device Onboarding State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "cmState",
						"description": "Device Connection Manager State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"description": "Device Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "pid",
						"description": "Device ProductId",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "source",
						"description": "Device Source",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "projectId",
						"description": "Device Project Id",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "workflowId",
						"description": "Device Workflow Id",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "projectName",
						"description": "Device Project Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "workflowName",
						"description": "Device Workflow Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "smartAccountId",
						"description": "Device Smart Account",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "virtualAccountId",
						"description": "Device Virtual Account",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "lastContact",
						"description": "Device Has Contacted lastContact > 0",
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ListDevicesResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-workflow/{id}": {
			"put": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Update Workflow",
				"description": "Update an existing workflow",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Workflow"
						},
						"in": "body"
					},
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateWorkflowResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Delete Workflow",
				"description": "Delete a workflow given its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteWorkflowResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Workflow",
				"description": "Get a workflow given its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetWorkflowResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/create-application-set": {
			"post": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Post Application Set",
				"description": "Invoke the API to create a custom application set",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/template-programmer/template/deploy": {
			"post": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Deploy Template",
				"description": "API to deploy a template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateDeploymentInfo"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateDeploymentStatusDTO"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/create-application-policy": {
			"post": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Post Application Policy Intent",
				"description": "Invoke the API to create, modify or delete an application-policy",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/application-policy": {
			"get": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Get Application Policies",
				"description": "Invoke the API to return all (or specific) application-policy(ies)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "offset",
						"description": "",
						"default": "1",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "limit",
						"description": "",
						"default": "500",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "applicationPolicyNamespace",
						"description": "",
						"default": "",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-health": {
			"get": {
				"operationId": "",
				"tags": [
					"Intent: Devices",
					"Intent: Health",
					"Intent: API"
				],
				"summary": "Network Health",
				"description": "Network Devices and their health by category",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "startTime",
						"description": "Start Time",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "End Time",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/global-credential/snmpv2-write-community": {
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Updates global SNMP write community",
				"description": "This method is used to update global SNMP write community",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvWriteCommunityDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Creates global SNMP write community",
				"description": "This method is used to add global SNMP write community",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SNMPvWriteCommunityDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/global-credential/http-write": {
			"post": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Creates global HTTP write credentials",
				"description": "This method is used to add global HTTP write credentials",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/HTTPWriteCredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Updates global HTTP Write credential",
				"description": "This method is used to update global HTTP Write credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/HTTPWriteCredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/config": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves device config list",
				"description": "Gets the config for all devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RawCliInfoNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/global-credential/{id}": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves credential sub type for the given credential Id",
				"description": "This method is used to get credential sub type for the given Id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Global Credential ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GlobalCredentialSubTypeResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/{id}": {
			"delete": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Delete network device by ID",
				"description": "Removes the network device for the given ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "isForceDelete",
						"description": "isForceDelete",
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves network device by ID",
				"description": "Gets the network device for the given device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/{id}/collection-schedule": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves the collection interval specified by device ID",
				"description": "Retrieves collection interval by device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/{startIndex}/{recordsToReturn}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves network device by range",
				"description": "Gets the list of network devices for the given range",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startIndex",
						"description": "Start index",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToReturn",
						"description": "Number of records to return",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/{id}/meraki-organization": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Get the organizations chosen while adding the meraki dashboard",
				"description": "This method is used to get the selected organizations for the meraki dashboard",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SuccessResultList"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/{id}/brief": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves network device brief by ID",
				"description": "Gets brief network device info such as hostname, management IP address for the given device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceBriefNIOResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/count": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves the number of discoveries",
				"description": "Gets the count of all available discovery jobs",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/{id}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves interface by ID",
				"description": "Gets the interface for the given interface ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Interface ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves all interfaces",
				"description": "Gets all available interfaces with a maximum limit of 500",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{startIndex}/{recordsToReturn}": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves the discovery in the given range",
				"description": "Gets the discovery for the range specified",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startIndex",
						"description": "Start index",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToReturn",
						"description": "Number of records to return",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DiscoveryNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/topology/site-topology": {
			"get": {
				"operationId": "",
				"tags": ["Networks"],
				"summary": "getSiteTopology",
				"description": "This method is used to obtain the site topology",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SiteResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/task": {
			"get": {
				"operationId": "",
				"tags": ["Task"],
				"summary": "Get filtered tasks",
				"description": "This method is used to retrieve task(s) based on various filters",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startTime",
						"description": "This is the epoch start time from which tasks need to be fetched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "This is the epoch end time upto which audit records need to be fetched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "data",
						"description": "Fetch tasks that contains this data",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "errorCode",
						"description": "Fetch tasks that have this error code",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serviceType",
						"description": "Fetch tasks with this service type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "username",
						"description": "Fetch tasks with this username",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "progress",
						"description": "Fetch tasks that contains this progress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isError",
						"description": "Fetch tasks ended as success or failure. Valid values: true, false",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "failureReason",
						"description": "Fetch tasks that contains this failure reason",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "parentId",
						"description": "Fetch tasks that have this parent Id",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "Sort results by this field",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "Sort order - asc or dsc",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskDTOListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/image/distribution": {
			"post": {
				"operationId": "",
				"tags": ["SWIM"],
				"summary": "Trigger distribution of an image",
				"description": "Performs distribution of an image to a given device.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DistributeDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device-poller/cli/legit-reads": {
			"get": {
				"operationId": "",
				"tags": ["Command Runner"],
				"summary": "Get all keywords of CLIs accepted by command runner",
				"description": "Get valid keywords",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/LegitCliKeyResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/count": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Device Count",
				"description": "This API is used to get the number of the devices matching provided filters. This is useful for pageination.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "serialNumber",
						"description": "Device Serial Number",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "state",
						"description": "Device State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "onbState",
						"description": "Device Onboarding State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "cmState",
						"description": "Device Connection Manager State",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"description": "Device Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "pid",
						"description": "Device ProductId",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "source",
						"description": "Device Source",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "projectId",
						"description": "Device Project Id",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "workflowId",
						"description": "Device Workflow Id",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "projectName",
						"description": "Device Project Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "workflowName",
						"description": "Device Workflow Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "smartAccountId",
						"description": "Device Smart Account",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "virtualAccountId",
						"description": "Device Virtual Account",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "lastContact",
						"description": "Device Has Contacted lastContact > 0",
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceCountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-settings/vacct": {
			"delete": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Deregister Virtual Account",
				"description": "This API is used to deregister the specified smart account & virtual account info and the associated device information from the PnP System & database. The devices associated with the deregistered virtual account are removed from the PnP database as well. The deregistered smart & virtual account info is returned in the response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "domain",
						"description": "Smart Account Domain",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "Virtual Account Name",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeregisterVirtualAccountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/vacct-sync": {
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Sync Virtual Account Devices",
				"description": "This API is used to sync the device info from the given smart account & virtual account with the PnP database. The list of synced devices is returned in the response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SAVAMapping"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SyncVirtualAccountDevicesResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-settings/sacct": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Smart Account List",
				"description": "This API is used to get list of Smart Accounts. The list of smart account domains is returned in the response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSmartAccountListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/sacct/{domain}/vacct/{name}/sync-result": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Sync Result for Virtual Account",
				"description": "This API is used to get the device sync info from the given smart account & virtual account with the PnP database. The SAVAMapping object which has the list of devices synced since the last sync is returned in the response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "domain",
						"description": "Smart Account Domain",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "name",
						"description": "Virtual Account Name",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetSyncResultForVirtualAccountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-workflow/count": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Workflow Count",
				"description": "This API is used to get the number of the workflows.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Workflow Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetWorkflowCountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/client-detail": {
			"get": {
				"operationId": "",
				"tags": [
					"Intent: Clients",
					"Intent: Detail",
					"Intent: API"
				],
				"summary": "Client Detail",
				"description": "Get Client Details for a single client",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "timestamp",
						"description": "timestamp",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "macAddress",
						"description": "MAC Address of the client",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ClientDetailResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/template-programmer/template/{templateId}": {
			"delete": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Deletes the template",
				"description": "Deletes the template",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "templateId",
						"description": "templateId",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Gets details of a given template",
				"description": "Details of the template",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "templateId",
						"description": "templateId",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/template-programmer/project/{projectId}/template": {
			"post": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Create Template",
				"description": "API to create a template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateDTO"
						},
						"in": "body"
					},
					{
						"name": "projectId",
						"description": "projectId",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/applications": {
			"get": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Get Applications",
				"description": "Invoke the API to return the list of all (or specific) defined application(s)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "offset",
						"description": "",
						"default": "1",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "limit",
						"description": "",
						"default": "500",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "applicationName",
						"description": "",
						"default": "",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/application/count": {
			"get": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Get Applications Count",
				"description": "Invoke the API to return the number of defined applications",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "count",
						"description": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/network-device-detail": {
			"get": {
				"operationId": "",
				"tags": [
					"Intent: Devices",
					"Intent: Detail",
					"Intent: API"
				],
				"summary": "Network Device Detail",
				"description": "Get Network Device Detail",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "timestamp",
						"description": "timestamp",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "searchBy",
						"description": "MAC Address or UUID or Name of the Device",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "identifier",
						"description": "macAddress or uuid or nwDeviceName",
						"default": "",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceDetailResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/site-hierarchy": {
			"get": {
				"operationId": "",
				"tags": [
					"Intent: Sites",
					"Intent: Health",
					"Intent: API"
				],
				"summary": "Site Hierarchy",
				"description": "Site Hierarchy along with health Info",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "timestamp",
						"description": "Timestamp ",
						"default": "",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SiteHierarchyResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/global-credential/netconf": {
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Updates global netconf credential",
				"description": "This method is used to update global netconf credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NetconfCredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Creates global netconf credential",
				"description": "This method is used to add global netconf credential",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NetconfCredentialDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/global-credential/{globalCredentialId}": {
			"delete": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves global credential by ID",
				"description": "This method is used to delete global credential for the given ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "globalCredentialId",
						"description": "ID of global-credential",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Update global credential for network devices in site(s)",
				"description": "Update global credential for network devices in site(s)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SitesInfoDTO"
						},
						"in": "body"
					},
					{
						"name": "globalCredentialId",
						"description": "Global credential Uuid",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/snmp-property": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves SNMP properties",
				"description": "This method is used to get SNMP properties",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SystemPropertyListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Creates or updates SNMP properties",
				"description": "This method is used to add SNMP properties",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/SystemPropertyNameAndIntValueDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/config/count": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves config count",
				"description": "Gets the count of device configs",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/module/{id}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Gives Module info by its id",
				"description": "Get module by id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ModuleResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/serial-number/{serialNumber}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves network device by serial number",
				"description": "Gets the network device with the given serial number",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "serialNumber",
						"description": "Device serial number",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/file": {
			"post": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Export network-device to file",
				"description": "Export the selected network-device to a file",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ExportDeviceDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/ip-address/{ipAddress}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves network device by IP address",
				"description": "Gets the network device with the given IP address",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ipAddress",
						"description": "Device IP address",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/ip-address/{ipAddress}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves interfaces by IP address",
				"description": "Gets list of interfaces with the given IP address",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "ipAddress",
						"description": "IP address of the interface",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/network-device/{deviceId}/{startIndex}/{recordsToReturn}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves device interfaces in the given range",
				"description": "Gets the list of interfaces for the device for the specified range",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "startIndex",
						"description": "Start index",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToReturn",
						"description": "Number of records to return",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery": {
			"delete": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Deletes all discovery",
				"description": "Stops all the discoveries and removes them",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Updates an existing discovery specified by id - only for starting/stopping the discovery",
				"description": "Stops or starts an existing discovery",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/DiscoveryNIO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Starts a new discovery process and returns a task-id",
				"description": "Initiates discovery with the given parameters",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/InventoryRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{startIndex}/{recordsToDelete}": {
			"delete": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Deletes the discovery in the given range",
				"description": "Stops discovery for the given range and removes them",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startIndex",
						"description": "Start index",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToDelete",
						"description": "Number of records to delete",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/task/operation/{operationId}/{offset}/{limit}": {
			"get": {
				"operationId": "",
				"tags": ["Task"],
				"summary": "getTaskByOperationId",
				"description": "This method is used to find root tasks assoicated to an operationid ",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "operationId",
						"description": "operationId",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "Index, minimum value is 0",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "limit",
						"description": "The maximum value of {limit} supported is 500. <br/> Base 1 indexing for {limit}, minimum value is 1",
						"required": true,
						"type": "integer",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskDTOListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "If {limit} value is more than 500"
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/flow-analysis/{flowAnalysisId}": {
			"delete": {
				"operationId": "",
				"tags": ["Path Trace"],
				"summary": "Deletes a flow analysis request",
				"description": "Deletes a flow analysis request by its id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "flowAnalysisId",
						"description": "Flow analysis request id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "",
				"tags": ["Path Trace"],
				"summary": "Retrieves result of a previously requested flow analysis",
				"description": "Retrieves result of a previously requested flow analysis by its Flow Analysis id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "flowAnalysisId",
						"description": "Flow analysis request id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/PathResponseResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "No correspoding flow analysis result for requested Id"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/topology/l2/{vlanID}": {
			"get": {
				"operationId": "",
				"tags": ["Networks"],
				"summary": "getL2Topology",
				"description": "This method is used to obtain the Layer 2 topology by Vlan ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "vlanID",
						"description": "Vlan Name for e.g Vlan1, Vlan23 etc",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TopologyResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/image/importation/source/file": {
			"post": {
				"operationId": "",
				"tags": ["SWIM"],
				"summary": "Import an image from local file system",
				"description": "Imports an image to SWIM image repository from local file system. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "isThirdParty",
						"description": "Third party Image check",
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "thirdPartyVendor",
						"description": "Third Party Vendor",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "thirdPartyImageFamily",
						"description": "Third Party image family",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "thirdPartyApplicationType",
						"description": "Third Party Application Type",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/file/namespace/{nameSpace}": {
			"get": {
				"operationId": "",
				"tags": ["System"],
				"summary": "Returns list of files under a specific namespace",
				"description": "This method is used to obtain a list of files under a specific namespace",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "nameSpace",
						"description": "A listing of fileId's",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FileObjectListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/{id}": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Device by ID",
				"description": "Get device details of the device with input device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceByIDResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Update Device",
				"description": "This API is used to update device details of a device that exists in the PnP database.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Device"
						},
						"in": "body"
					},
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"delete": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Delete Device",
				"description": "This API is used to delete the specified device from the database.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteDeviceResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-settings": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "View Settings",
				"description": "Get this user's list of global PnP settings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ViewSettingsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"put": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Update Settings",
				"description": "Change this user's list of global PnP settings",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Settings"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/UpdateSettingsResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/history": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Device History",
				"description": "Retrieves history for a specific device. Serial Number is a required parameter",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "serialNumber",
						"description": "Device Serial Number",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sort",
						"description": "Comma seperated list of fields to sort on",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (des)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetDeviceHistoryResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-workflow": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "List Workflows",
				"description": "This API is used to get the list of workflows that match the provided filter. Pagination and sorting are also supported. If a limit is not specified, it will default to return 50 workflows.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "limit",
						"description": "Limits number of results",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "Index of first result",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "sort",
						"description": "Comma seperated lost of fields to sort on",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "sortOrder",
						"description": "Sort Order Ascending (asc) or Descending (des)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "type",
						"description": "Workflow Type",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"description": "Workflow Name",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ListWorkflowsResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Create Workflow",
				"description": "This API is used to add a PnP Workflow along with the relevant tasks in the workflow into the PnP database.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Workflow"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateWorkflowResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/template-programmer/project": {
			"put": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Update Project",
				"description": "This API is used to update an existing project.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProjectDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"post": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Create Project",
				"description": "This API is used to create a new project.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ProjectDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			},
			"get": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Gets a list of projects",
				"description": "List the projects",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "name",
						"description": "Name of project to be searched",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CollectionProjectDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/template-programmer/template/preview": {
			"put": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Preview Template",
				"description": "API to preview a template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplatePreviewRequestDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplatePreviewResponseDTO"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/application-sets": {
			"get": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Get Application Sets",
				"description": "Invoke the API to return all (or specific) defined application-set(s)",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "offset",
						"description": "",
						"default": "1",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "limit",
						"description": "",
						"default": "500",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "applicationSetName",
						"description": "",
						"default": "",
						"required": false,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/application-set/count": {
			"get": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Get Application Sets Count",
				"description": "Invoke the API to return the number of defined application sets",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "count",
						"description": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/delete-ssid/{deviceName}/{wirelessNetworkProfileName}/{ssidName}/{interfaceName}": {
			"delete": {
				"operationId": "",
				"tags": [
					"Intent: WLC",
					"Intent: Connectivity"
				],
				"summary": "Delete SSID",
				"description": "De-provision WLC, also removes wireless network profile, SSID and dynamic interface",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "deviceName",
						"description": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "wirelessNetworkProfileName",
						"description": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "ssidName",
						"description": "",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "interfaceName",
						"description": "",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeleteSSIDResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/network-device/{id}/wireless-info": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves wireless lan conrtoller info by Device ID",
				"description": "Gets the wireless lan controller info using the given device ID",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/WirelessInfoResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/collection-schedule/global": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves the collection interval of all devices",
				"description": "Retrieves collection interval of all devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/tenantinfo/macaddress": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Updates certificate validation status and returns tenantId",
				"description": "Registers a device for WSA notification",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "serialNumber",
						"description": "Serial number of the device",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "macaddress",
						"description": "Mac addres of the device",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/RegisterNetworkDeviceResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/count": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves network device count",
				"description": "Gets the count of network devices filtered by management IP address, mac address, hostname and location name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/module/count": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Gives total number of Modules",
				"description": "Get Module Count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "deviceId",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "nameList",
						"description": "nameList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "vendorEquipmentTypeList",
						"description": "vendorEquipmentTypeList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "partNumberList",
						"description": "partNumberList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "operationalStateCodeList",
						"description": "operationalStateCodeList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/ospf": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves OSPF interfaces",
				"description": "Gets the interfaces that has OSPF enabled",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{id}/job": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves list of discovery jobs for the specified discovery id",
				"description": "Gets the list of discovery jobs for the given id. The result can optionally be filtered based on IP",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "ipAddress",
						"description": "ipAddress",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DiscoveryJobNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{id}/network-device/{startIndex}/{recordsToReturn}": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves the range of network devices discovered for the given discovery",
				"description": "Gets the network devices discovered for the given discovery and for the given range. The maximum number of records that could be retrieved is 500",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Discovery ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "startIndex",
						"description": "Start index",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "recordsToReturn",
						"description": "Number of records to return",
						"required": true,
						"type": "integer",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/job": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves the list of discovery jobs for the given IP",
				"description": "Gets the list of discovery jobs for the given IP",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "ipAddress",
						"description": "ipAddress",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "name",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DiscoveryJobNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/network-device/{deviceId}/interface-name": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves interface for the given device and interface name",
				"description": "Gets the interface for the given device ID and for the given interface name",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "name",
						"description": "Interface name",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DeviceIfResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/file/{fileId}": {
			"get": {
				"operationId": "",
				"tags": ["System"],
				"summary": "Downloads a file referred by the fileId",
				"description": "This method is used to download a file referred by the fileId",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "fileId",
						"description": "File Identification number",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/DownloadsAFileReferredByTheFileIdResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/topology/physical-topology": {
			"get": {
				"operationId": "",
				"tags": ["Networks"],
				"summary": "getPhysicalTopology",
				"description": "This method is used to obtain the raw physical topology and filter based on nodeType",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "nodeType",
						"description": "nodeType",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TopologyResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/task/{taskId}/tree": {
			"get": {
				"operationId": "",
				"tags": ["Task"],
				"summary": "Get Task Tree",
				"description": "This method is used to retrieve a task with its children tasks based on their id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "taskId",
						"description": "UUID of the Task",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskDTOListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "No task corresponding to the id was found"
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/image/importation": {
			"get": {
				"operationId": "",
				"tags": ["SWIM"],
				"summary": "Get image details with filter",
				"description": "Get image details based on filter criteria, use % for like operations. Example: filterByName = cat3k%",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "imageUuid",
						"description": "imageUuid",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "name",
						"description": "name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "family",
						"description": "family",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "applicationType",
						"description": "applicationType",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "imageIntegrityStatus",
						"description": "imageIntegrityStatus - FAILURE, UNKNOWN, VERIFIED",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "version",
						"description": "software Image Version",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "imageSeries",
						"description": "image Series",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "imageName",
						"description": "image Name",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isTaggedGolden",
						"description": "is Tagged Golden",
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "isCCORecommended",
						"description": "is recommended from cisco.com",
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "isCCOLatest",
						"description": "is latest from cisco.com",
						"required": false,
						"type": "boolean",
						"in": "query"
					},
					{
						"name": "createdTime",
						"description": "time in milliseconds (epoch format)",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "imageSizeGreaterThan",
						"description": "size in bytes",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "imageSizeLesserThan",
						"description": "size in bytes",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "sort results by this field",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "sort order - 'asc' or 'des'. Default is asc",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "integer",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "integer",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ImageInfoListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/dashboard/count": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Categorized Device Count",
				"description": "Get Categorized Device Count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "category",
						"description": "Valid Values: state, errorState, onbState or source",
						"required": true,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetCategorizedDeviceCountResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/template-programmer/project/{projectId}": {
			"delete": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Deletes the project",
				"description": "Deletes the project",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "projectId",
						"description": "projectId",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/system/v1/auth/token": {
			"post": {
				"operationId": "",
				"tags": ["Authentication"],
				"summary": "Generate Token",
				"description": "This method is used to generate token.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/GenerateTokenRequest"
						},
						"in": "body"
					},
					{
						"name": "Authorization",
						"description": "<username:password> of 64 based encoded string",
						"default": "Basic YWRtaW46TWFnbGV2MTIz",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "successful token generation",
						"schema": {
							"$ref": "#/definitions/GenerateTokenResponse"
						}
					},
					"401": {
						"description": "invalid credentials."
					}
				}
			}
		},
		"/dna/intent/api/v1/create-application": {
			"post": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Post Application",
				"description": "Invoke the API to create a custom application",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/import": {
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Import Many Devices",
				"description": "This API is used to import a list of Planned devices to the PnP database. A Planned device is a device that the customer has bought and/or is planning to manage.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/Device"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ImportManyDevicesResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/template-programmer/template/deploy/status/{deploymentId}": {
			"get": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Status of template deployment",
				"description": "API to retrieve the status of template deployment.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deploymentId",
						"description": "deploymentId",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TemplateDeploymentStatusDTO"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/delete-application-set": {
			"delete": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Delete Application Set",
				"description": "Invoke the API to delete a custom application",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "applicationSetId",
						"description": "",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/api/v1/global-credential": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves global credential for the given credential sub type",
				"description": "This method is used to get global credential for the given credential sub type",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "credentialSubType",
						"description": "Credential type as CLI / SNMPV2_READ_COMMUNITY / SNMPV2_WRITE_COMMUNITY / SNMPV3 / HTTP_WRITE / HTTP_READ / NETCONF",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "sortBy",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "order",
						"description": "order",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GlobalCredentialListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/{id}/vlan": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves list of VLAN data that are associated with interface for a device",
				"description": "getDeviceVLANData",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "deviceUUID",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "interfaceType",
						"description": "Vlan assocaited with sub-interface",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/VlanListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/functional-capability/autocomplete": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieve the values of given fields",
				"description": "Gets the field values based on given filter",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "functionName",
						"description": "functionName",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/SuccessResultList"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/sync": {
			"put": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Network device sync api",
				"description": "Sync's the devices. If forceSync param is false (default) then the sync would run in normal priority thread. If forceSync param is true then the sync would run in high priority thread if avaiable, else the sync will fail. Result can be seen in the child task of each device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/NetworkDeviceSyncApiRequest"
						},
						"in": "body"
					},
					{
						"name": "forceSync",
						"description": "forceSync",
						"required": false,
						"type": "boolean",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/module": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Gives all the modules associated with given device id",
				"description": "Get modules of the given device id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "deviceId",
						"required": true,
						"type": "string",
						"in": "query"
					},
					{
						"name": "limit",
						"description": "limit",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "offset",
						"description": "offset",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "nameList",
						"description": "nameList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "vendorEquipmentTypeList",
						"description": "vendorEquipmentTypeList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "partNumberList",
						"description": "partNumberList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "operationalStateCodeList",
						"description": "operationalStateCodeList",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ModuleListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/network-device/functional-capability/{id}": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Gets the functional capability by id",
				"description": "Retrieve functional capability with given id",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/FunctionalCapabilityResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/count": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves interface count",
				"description": "Gets the count of interfaces for all devices",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/interface/network-device/{deviceId}/count": {
			"get": {
				"operationId": "",
				"tags": ["Network Device"],
				"summary": "Retrieves device interface count",
				"description": "Gets the interface count for the given device",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "deviceId",
						"description": "Device ID",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{id}/summary": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieve network devices from a discovery on given filters",
				"description": "Gets the network devices from a discovery job based on given filters",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortBy",
						"description": "sortBy",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "sortOrder",
						"description": "sortOrder",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "ipAddress",
						"description": "ipAddress",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "pingStatus",
						"description": "pingStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "snmpStatus",
						"description": "snmpStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "cliStatus",
						"description": "cliStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "netconfStatus",
						"description": "netconfStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					},
					{
						"name": "httpStatus",
						"description": "httpStatus",
						"required": false,
						"type": "array",
						"in": "query",
						"items": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/discovery/{id}/network-device": {
			"get": {
				"operationId": "",
				"tags": ["Network Discovery"],
				"summary": "Retrieves the network devices discovered in the discovery specified by id",
				"description": "Gets the network devices discovered for the given discovery",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"description": "id",
						"required": true,
						"type": "string",
						"in": "path"
					},
					{
						"name": "taskId",
						"description": "taskId",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NetworkDeviceNIOListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/task/count": {
			"get": {
				"operationId": "",
				"tags": ["Task"],
				"summary": "Get task count",
				"description": "This method is used to retrieve task count",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "startTime",
						"description": "This is the epoch start time from which tasks need to be fetched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "endTime",
						"description": "This is the epoch end time upto which audit records need to be fetched",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "data",
						"description": "Fetch tasks that contains this data",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "errorCode",
						"description": "Fetch tasks that have this error code",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "serviceType",
						"description": "Fetch tasks with this service type",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "username",
						"description": "Fetch tasks with this username",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "progress",
						"description": "Fetch tasks that contains this progress",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "isError",
						"description": "Fetch tasks ended as success or failure. Valid values: true, false",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "failureReason",
						"description": "Fetch tasks that contains this failure reason",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "parentId",
						"description": "Fetch tasks that have this parent Id",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CountResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/topology/l3/{topologyType}": {
			"get": {
				"operationId": "",
				"tags": ["Networks"],
				"summary": "getL3Topology",
				"description": "This method is used to obtain Layer 3 device topology by routing protocol type",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "topologyType",
						"description": "Type of topology(OSPF,ISIS,etc)",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TopologyResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/file/namespace": {
			"get": {
				"operationId": "",
				"tags": ["System"],
				"summary": "Returns list of available namespaces",
				"description": "This method is used to obtain a list of available namespaces",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/NameSpaceListResult"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/image/importation/source/url": {
			"post": {
				"operationId": "",
				"tags": ["SWIM"],
				"summary": "Trigger now or schedule import of an image from a URL",
				"description": "Imports an image to SWIM image repository, source is any ftp or http URL. The image files with extensions bin, img, tar, smu, pie, aes, iso, ova, tar_gz and qcow2 are supported. Set siteUuid as -1 to tag as golden image.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ImageImportFromUrlDTO"
						},
						"in": "body"
					},
					{
						"name": "scheduleAt",
						"description": "Epoch Time (The number of milli-seconds since January 1 1970 UTC) at which the distribution should be scheduled (Optional) ",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "scheduleDesc",
						"description": "Custom Description (Optional)",
						"required": false,
						"type": "string",
						"in": "query"
					},
					{
						"name": "scheduleOrigin",
						"description": "Originator of this call (Optional)",
						"required": false,
						"type": "string",
						"in": "query"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/provision": {
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Provision Device",
				"description": "This API is used push one or more devices to Provisoned state and add them to inventory.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/PushProvisionRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ProvisionDeviceResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-device/claim": {
			"post": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Claim Device(s)",
				"description": "This API is used to assign a project & workflow (i.e. claim) one of more devices.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/ClaimDeviceRequest"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/ClaimDevicesResponse"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/onboarding/pnp-settings/sacct/{domain}/vacct": {
			"get": {
				"operationId": "",
				"tags": ["PnP"],
				"summary": "Get Virtual Account List",
				"description": "This API is used to get list of Virtual Accounts associated with the specified Smart Account. The list of virtual account names is returned in the response.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "domain",
						"description": "Smart Account Domain",
						"required": true,
						"type": "string",
						"in": "path"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/GetVirtualAccountListResponse"
						}
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/api/v1/template-programmer/template/version": {
			"post": {
				"operationId": "",
				"tags": ["Template Programmmer"],
				"summary": "Version Template",
				"description": "API to version the current contents of the template.",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/TemplateVersionRequestDTO"
						},
						"in": "body"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/TaskIdResult"
						}
					},
					"201": {
						"description": "The POST/PUT request was fulfilled and a new resource has been created. Information about the resource is in the response body."
					},
					"202": {
						"description": "The request was accepted for processing, but the processing has not been completed."
					},
					"204": {
						"description": "The request was successful, however no content was returned."
					},
					"206": {
						"description": "The GET request included a Range Header, and the server responded with the partial content matching the range."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"403": {
						"description": "The server recognizes the authentication credentials, but the client is not authorized to perform this request."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"409": {
						"description": "The target resource is in a conflicted state (for example, an edit conflict where a resource is being edited by multiple users). Retrying the request later might succeed."
					},
					"415": {
						"description": "The client sent a request body in a format that the server does not support (for example, XML to a server that only accepts JSON)."
					},
					"500": {
						"description": "The server could not fulfill the request."
					},
					"501": {
						"description": "The server has not implemented the functionality required to fulfill the request."
					},
					"503": {
						"description": "The server is (temporarily) unavailable."
					},
					"504": {
						"description": "The server did not respond inside time restrictions and timed-out."
					}
				}
			}
		},
		"/dna/intent/api/v1/delete-application": {
			"delete": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Delete Application",
				"description": "Invoke the API to delete a custom application",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					},
					{
						"name": "applicationId",
						"description": "",
						"default": "",
						"required": true,
						"type": "string",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/update-application": {
			"put": {
				"operationId": "",
				"tags": ["Intent: Application Policy"],
				"summary": "Edit Application",
				"description": "Invoke the API to create a custom application",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body."
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		},
		"/dna/intent/api/v1/create-ssid": {
			"post": {
				"operationId": "",
				"tags": [
					"Intent: WLC",
					"Intent: Connectivity"
				],
				"summary": "Create SSID",
				"description": "Creates non fabric enterprise SSID, dynamic interface, Wireless Network Profile and provisions WLC and AP",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "request",
						"description": "request",
						"required": true,
						"schema": {
							"$ref": "#/definitions/CreateSSIDRequest"
						},
						"in": "body"
					},
					{
						"name": "__runsync",
						"description": "Enable this parameter to execute the API and return a response synchronously",
						"default": false,
						"required": false,
						"type": "boolean",
						"in": "header"
					},
					{
						"name": "__timeout",
						"description": "During synchronous execution, this defines the maximum time to wait for a response, before the API execution is terminated",
						"default": "10",
						"required": false,
						"type": "number",
						"in": "header"
					}
				],
				"responses": {
					"200": {
						"description": "The request was successful. The result is contained in the response body.",
						"schema": {
							"$ref": "#/definitions/CreateSSIDResponse"
						}
					},
					"400": {
						"description": "The client made a request that the server could not understand (for example, the request syntax is incorrect)."
					},
					"401": {
						"description": "The client's authentication credentials included with the request are missing or invalid."
					},
					"404": {
						"description": "The client made a request for a resource that does not exist."
					},
					"500": {
						"description": "The server could not fulfill the request."
					}
				}
			}
		}
	},
	"definitions": {
		"SNMPvReadCommunityDTO": {
			"type": "object",
			"properties": {
				"comments": {
					"type": "string"
				},
				"credentialType": {
					"type": "string",
					"enum": [
						"GLOBAL",
						"APP"
					]
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"instanceTenantId": {
					"type": "string"
				},
				"instanceUuid": {
					"type": "string"
				},
				"readCommunity": {
					"type": "string"
				}
			}
		},
		"TaskIdResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"taskId": {
							"type": "object"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"HTTPReadCredentialDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"port": {
						"type": "integer"
					},
					"secure": {
						"type": "boolean"
					},
					"username": {
						"type": "string"
					}
				}
			}
		},
		"CLICredentialDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"enablePassword": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"password": {
						"type": "string"
					},
					"username": {
						"type": "string"
					}
				}
			}
		},
		"SNMPvCredentialDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"authPassword": {
						"type": "string"
					},
					"authType": {
						"type": "string",
						"enum": [
							"SHA",
							"MD5"
						]
					},
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"privacyPassword": {
						"type": "string"
					},
					"privacyType": {
						"type": "string",
						"enum": [
							"DES",
							"AES128"
						]
					},
					"snmpMode": {
						"type": "string",
						"enum": [
							"AUTHPRIV",
							"AUTHNOPRIV",
							"NOAUTHNOPRIV"
						]
					},
					"username": {
						"type": "string"
					}
				}
			}
		},
		"FunctionalCapabilityListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"deviceId": {
								"type": "string"
							},
							"functionalCapability": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"attributeInfo": {
											"type": "object",
											"properties": {}
										},
										"functionDetails": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"attributeInfo": {
														"type": "object",
														"properties": {}
													},
													"id": {
														"type": "string"
													},
													"propertyName": {
														"type": "string"
													},
													"stringValue": {
														"type": "string"
													}
												}
											}
										},
										"functionName": {
											"type": "string"
										},
										"functionOpState": {
											"type": "string",
											"enum": [
												"UNKNOWN",
												"NOT_APPLICABLE",
												"DISABLED",
												"ENABLED"
											]
										},
										"id": {
											"type": "string"
										}
									}
								}
							},
							"id": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SuccessResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceBriefNIO": {
			"type": "object",
			"properties": {
				"id": {
					"type": "string"
				},
				"role": {
					"type": "string"
				},
				"roleSource": {
					"type": "string"
				}
			}
		},
		"RetrievesAllNetworkDevicesResponse": {
			"type": "object",
			"properties": {}
		},
		"InventoryDeviceInfo": {
			"type": "object",
			"properties": {
				"cliTransport": {
					"type": "string"
				},
				"computeDevice": {
					"type": "boolean"
				},
				"enablePassword": {
					"type": "string"
				},
				"extendedDiscoveryInfo": {
					"type": "string"
				},
				"httpPassword": {
					"type": "string"
				},
				"httpPort": {
					"type": "string"
				},
				"httpSecure": {
					"type": "boolean"
				},
				"httpUserName": {
					"type": "string"
				},
				"ipAddress": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"merakiOrgId": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"netconfPort": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"serialNumber": {
					"type": "string"
				},
				"snmpAuthPassphrase": {
					"type": "string"
				},
				"snmpAuthProtocol": {
					"type": "string"
				},
				"snmpMode": {
					"type": "string"
				},
				"snmpPrivPassphrase": {
					"type": "string"
				},
				"snmpPrivProtocol": {
					"type": "string"
				},
				"snmpROCommunity": {
					"type": "string"
				},
				"snmpRWCommunity": {
					"type": "string"
				},
				"snmpRetry": {
					"type": "integer"
				},
				"snmpTimeout": {
					"type": "integer"
				},
				"snmpUserName": {
					"type": "string"
				},
				"snmpVersion": {
					"type": "string"
				},
				"type": {
					"type": "string",
					"enum": [
						"COMPUTE_DEVICE",
						"MERAKI_DASHBOARD",
						"NETWORK_DEVICE",
						"NODATACHANGE"
					]
				},
				"updateMgmtIPaddressList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"existMgmtIpAddress": {
								"type": "string"
							},
							"newMgmtIpAddress": {
								"type": "string"
							}
						}
					}
				},
				"userName": {
					"type": "string"
				}
			}
		},
		"SuccessResultList": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeviceIfListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"adminStatus": {
								"type": "string"
							},
							"className": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"deviceId": {
								"type": "string"
							},
							"duplex": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"ifIndex": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"interfaceType": {
								"type": "string"
							},
							"ipv4Address": {
								"type": "string"
							},
							"ipv4Mask": {
								"type": "string"
							},
							"isisSupport": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"mappedPhysicalInterfaceId": {
								"type": "string"
							},
							"mappedPhysicalInterfaceName": {
								"type": "string"
							},
							"mediaType": {
								"type": "string"
							},
							"nativeVlanId": {
								"type": "string"
							},
							"ospfSupport": {
								"type": "string"
							},
							"pid": {
								"type": "string"
							},
							"portMode": {
								"type": "string"
							},
							"portName": {
								"type": "string"
							},
							"portType": {
								"type": "string"
							},
							"serialNo": {
								"type": "string"
							},
							"series": {
								"type": "string"
							},
							"speed": {
								"type": "string"
							},
							"status": {
								"type": "string"
							},
							"vlanId": {
								"type": "string"
							},
							"voiceVlan": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CountResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "integer"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DiscoveryNIOResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"attributeInfo": {
							"type": "object",
							"properties": {}
						},
						"cdpLevel": {
							"type": "integer"
						},
						"deviceIds": {
							"type": "string"
						},
						"discoveryCondition": {
							"type": "string"
						},
						"discoveryStatus": {
							"type": "string"
						},
						"discoveryType": {
							"type": "string"
						},
						"enablePasswordList": {
							"type": "string"
						},
						"globalCredentialIdList": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"httpReadCredential": {
							"type": "object",
							"properties": {
								"comments": {
									"type": "string"
								},
								"credentialType": {
									"type": "string",
									"enum": [
										"GLOBAL",
										"APP"
									]
								},
								"description": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"instanceTenantId": {
									"type": "string"
								},
								"instanceUuid": {
									"type": "string"
								},
								"password": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"secure": {
									"type": "boolean"
								},
								"username": {
									"type": "string"
								}
							}
						},
						"httpWriteCredential": {
							"type": "object",
							"properties": {
								"comments": {
									"type": "string"
								},
								"credentialType": {
									"type": "string",
									"enum": [
										"GLOBAL",
										"APP"
									]
								},
								"description": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"instanceTenantId": {
									"type": "string"
								},
								"instanceUuid": {
									"type": "string"
								},
								"password": {
									"type": "string"
								},
								"port": {
									"type": "integer"
								},
								"secure": {
									"type": "boolean"
								},
								"username": {
									"type": "string"
								}
							}
						},
						"id": {
							"type": "string"
						},
						"ipAddressList": {
							"type": "string"
						},
						"ipFilterList": {
							"type": "string"
						},
						"isAutoCdp": {
							"type": "boolean"
						},
						"lldpLevel": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"netconfPort": {
							"type": "string"
						},
						"numDevices": {
							"type": "integer"
						},
						"parentDiscoveryId": {
							"type": "string"
						},
						"passwordList": {
							"type": "string"
						},
						"preferredMgmtIPMethod": {
							"type": "string"
						},
						"protocolOrder": {
							"type": "string"
						},
						"retryCount": {
							"type": "integer"
						},
						"snmpAuthPassphrase": {
							"type": "string"
						},
						"snmpAuthProtocol": {
							"type": "string"
						},
						"snmpMode": {
							"type": "string"
						},
						"snmpPrivPassphrase": {
							"type": "string"
						},
						"snmpPrivProtocol": {
							"type": "string"
						},
						"snmpRoCommunity": {
							"type": "string"
						},
						"snmpRoCommunityDesc": {
							"type": "string"
						},
						"snmpRwCommunity": {
							"type": "string"
						},
						"snmpRwCommunityDesc": {
							"type": "string"
						},
						"snmpUserName": {
							"type": "string"
						},
						"timeOut": {
							"type": "integer"
						},
						"updateMgmtIp": {
							"type": "boolean"
						},
						"userNameList": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CommandRunnerDTO": {
			"type": "object",
			"properties": {
				"commands": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"description": {
					"type": "string"
				},
				"deviceUuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"name": {
					"type": "string"
				},
				"timeout": {
					"type": "integer"
				}
			}
		},
		"TaskDTOResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"additionalStatusURL": {
							"type": "string"
						},
						"data": {
							"type": "string"
						},
						"endTime": {
							"type": "string"
						},
						"errorCode": {
							"type": "string"
						},
						"errorKey": {
							"type": "string"
						},
						"failureReason": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"isError": {
							"type": "boolean"
						},
						"lastUpdate": {
							"type": "string"
						},
						"operationIdList": {
							"type": "object"
						},
						"parentId": {
							"type": "string"
						},
						"progress": {
							"type": "string"
						},
						"rootId": {
							"type": "string"
						},
						"serviceType": {
							"type": "string"
						},
						"startTime": {
							"type": "string"
						},
						"username": {
							"type": "string"
						},
						"version": {
							"type": "integer"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"VlanNamesResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ActivateDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"activateLowerImageVersion": {
						"type": "boolean"
					},
					"deviceUpgradeMode": {
						"type": "string"
					},
					"deviceUuid": {
						"type": "string"
					},
					"distributeIfNeeded": {
						"type": "boolean"
					},
					"imageUuidList": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"smuImageUuidList": {
						"type": "array",
						"items": {
							"type": "string"
						}
					}
				}
			}
		},
		"FlowAnalysisListOutput": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"controlPath": {
								"type": "boolean"
							},
							"createTime": {
								"type": "integer"
							},
							"destIP": {
								"type": "string"
							},
							"destPort": {
								"type": "string"
							},
							"failureReason": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"inclusions": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"lastUpdateTime": {
								"type": "integer"
							},
							"periodicRefresh": {
								"type": "boolean"
							},
							"protocol": {
								"type": "string"
							},
							"sourceIP": {
								"type": "string"
							},
							"sourcePort": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"UnclaimRequest": {
			"type": "object",
			"properties": {
				"deviceIdList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"UnClaimDeviceResponse": {
			"type": "object"
		},
		"SAVAMapping": {
			"type": "object",
			"properties": {
				"autoSyncPeriod": {
					"type": "integer"
				},
				"ccoUser": {
					"type": "string"
				},
				"expiry": {
					"type": "integer"
				},
				"lastSync": {
					"type": "integer"
				},
				"profile": {
					"type": "object",
					"properties": {
						"addressFqdn": {
							"type": "string"
						},
						"addressIpV4": {
							"type": "string"
						},
						"cert": {
							"type": "string"
						},
						"makeDefault": {
							"type": "boolean"
						},
						"name": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"profileId": {
							"type": "string"
						},
						"proxy": {
							"type": "boolean"
						}
					}
				},
				"smartAccountId": {
					"type": "string"
				},
				"syncResult": {
					"type": "object",
					"properties": {
						"syncList": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"deviceSnList": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"syncType": {
										"type": "string",
										"enum": [
											"Add",
											"Update",
											"Delete",
											"MismatchError"
										]
									}
								}
							}
						},
						"syncMsg": {
							"type": "string"
						}
					}
				},
				"syncResultStr": {
					"type": "string"
				},
				"syncStartTime": {
					"type": "integer"
				},
				"syncStatus": {
					"type": "string",
					"enum": [
						"NOT_SYNCED",
						"SYNCING",
						"SUCCESS",
						"FAILURE"
					]
				},
				"tenantId": {
					"type": "string"
				},
				"token": {
					"type": "string"
				},
				"virtualAccountId": {
					"type": "string"
				}
			}
		},
		"EditPnPServerProfileResponse": {
			"type": "object"
		},
		"ResetRequest": {
			"type": "object",
			"properties": {
				"deviceResetList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"configList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"configId": {
											"type": "string"
										},
										"configParameters": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"key": {
														"type": "string"
													},
													"value": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							},
							"deviceId": {
								"type": "string"
							},
							"licenseLevel": {
								"type": "string"
							},
							"licenseType": {
								"type": "string"
							},
							"topOfStackSerialNumber": {
								"type": "string"
							}
						}
					}
				},
				"projectId": {
					"type": "string"
				},
				"workflowId": {
					"type": "string"
				}
			}
		},
		"ResetDeviceResponse": {
			"type": "object"
		},
		"AddVirtualAccountResponse": {
			"type": "object"
		},
		"CollectionTemplateInfo": {
			"type": "object"
		},
		"ClientHealthResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"siteId": {
								"type": "string"
							},
							"scoreDetail": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"scoreCategory": {
											"type": "object",
											"properties": {
												"scoreCategory": {
													"type": "string"
												},
												"value": {
													"type": "string"
												}
											}
										},
										"scoreValue": {
											"type": "string"
										},
										"clientCount": {
											"type": "string"
										},
										"clientUniqueCount": {
											"type": "string"
										},
										"starttime": {
											"type": "string"
										},
										"endtime": {
											"type": "string"
										},
										"scoreList": {
											"type": "array",
											"items": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"Device": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"_id": {
						"type": "string"
					},
					"deviceInfo": {
						"type": "object",
						"properties": {
							"aaaCredentials": {
								"type": "object",
								"properties": {
									"password": {
										"type": "string"
									},
									"username": {
										"type": "string"
									}
								}
							},
							"addedOn": {
								"type": "integer"
							},
							"addnMacAddrs": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"agentType": {
								"type": "string",
								"enum": [
									"POSIX",
									"IOS"
								]
							},
							"authStatus": {
								"type": "string"
							},
							"authenticatedSudiSerialNo": {
								"type": "string"
							},
							"capabilitiesSupported": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"cmState": {
								"type": "string",
								"enum": [
									"NotContacted",
									"Contacted",
									"Disconnected",
									"SecuringConnection",
									"SecuredConnection",
									"Authenticated",
									"ErrorSecuringConnection",
									"ErrorAuthenticating"
								]
							},
							"description": {
								"type": "string"
							},
							"deviceSudiSerialNos": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"deviceType": {
								"type": "string"
							},
							"featuresSupported": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"fileSystemList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"freespace": {
											"type": "integer"
										},
										"name": {
											"type": "string"
										},
										"readable": {
											"type": "boolean"
										},
										"size": {
											"type": "integer"
										},
										"type": {
											"type": "string"
										},
										"writeable": {
											"type": "boolean"
										}
									}
								}
							},
							"firstContact": {
								"type": "integer"
							},
							"hostname": {
								"type": "string"
							},
							"httpHeaders": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"key": {
											"type": "string"
										},
										"value": {
											"type": "string"
										}
									}
								}
							},
							"imageFile": {
								"type": "string"
							},
							"imageVersion": {
								"type": "string"
							},
							"ipInterfaces": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"ipv4Address": {
											"type": "object"
										},
										"ipv6AddressList": {
											"type": "array",
											"items": {
												"type": "object"
											}
										},
										"macAddress": {
											"type": "string"
										},
										"name": {
											"type": "string"
										},
										"status": {
											"type": "string"
										}
									}
								}
							},
							"lastContact": {
								"type": "integer"
							},
							"lastSyncTime": {
								"type": "integer"
							},
							"lastUpdateOn": {
								"type": "integer"
							},
							"location": {
								"type": "object",
								"properties": {
									"address": {
										"type": "string"
									},
									"altitude": {
										"type": "string"
									},
									"latitude": {
										"type": "string"
									},
									"longitude": {
										"type": "string"
									},
									"siteId": {
										"type": "string"
									}
								}
							},
							"macAddress": {
								"type": "string"
							},
							"mode": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"neighborLinks": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"localInterfaceName": {
											"type": "string"
										},
										"localMacAddress": {
											"type": "string"
										},
										"localShortInterfaceName": {
											"type": "string"
										},
										"remoteDeviceName": {
											"type": "string"
										},
										"remoteInterfaceName": {
											"type": "string"
										},
										"remoteMacAddress": {
											"type": "string"
										},
										"remotePlatform": {
											"type": "string"
										},
										"remoteShortInterfaceName": {
											"type": "string"
										},
										"remoteVersion": {
											"type": "string"
										}
									}
								}
							},
							"onbState": {
								"type": "string",
								"enum": [
									"NotContacted",
									"Connecting",
									"ErrorSecuringConnection",
									"ErrorAuthenticating",
									"Initializing",
									"Initialized",
									"ErrorInitializing",
									"ErrorSudiAuthorizing",
									"ExecutingWorkflow",
									"ExecutedWorkflow",
									"ErrorExecutingWorkflow",
									"ExecutingReset",
									"ErrorExecutingReset",
									"Provisioned"
								]
							},
							"pid": {
								"type": "string"
							},
							"pnpProfileList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"createdBy": {
											"type": "string"
										},
										"discoveryCreated": {
											"type": "boolean"
										},
										"primaryEndpoint": {
											"type": "object",
											"properties": {
												"certificate": {
													"type": "string"
												},
												"fqdn": {
													"type": "string"
												},
												"ipv4Address": {
													"type": "object"
												},
												"ipv6Address": {
													"type": "object"
												},
												"port": {
													"type": "integer"
												},
												"protocol": {
													"type": "string"
												}
											}
										},
										"profileName": {
											"type": "string"
										},
										"secondaryEndpoint": {
											"type": "object",
											"properties": {
												"certificate": {
													"type": "string"
												},
												"fqdn": {
													"type": "string"
												},
												"ipv4Address": {
													"type": "object"
												},
												"ipv6Address": {
													"type": "object"
												},
												"port": {
													"type": "integer"
												},
												"protocol": {
													"type": "string"
												}
											}
										}
									}
								}
							},
							"preWorkflowCliOuputs": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"cli": {
											"type": "string"
										},
										"cliOutput": {
											"type": "string"
										}
									}
								}
							},
							"projectId": {
								"type": "string"
							},
							"projectName": {
								"type": "string"
							},
							"reloadRequested": {
								"type": "boolean"
							},
							"serialNumber": {
								"type": "string"
							},
							"smartAccountId": {
								"type": "string"
							},
							"source": {
								"type": "string"
							},
							"stack": {
								"type": "boolean"
							},
							"stackInfo": {
								"type": "object",
								"properties": {
									"isFullRing": {
										"type": "boolean"
									},
									"stackMemberList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"hardwareVersion": {
													"type": "string"
												},
												"licenseLevel": {
													"type": "string"
												},
												"licenseType": {
													"type": "string"
												},
												"macAddress": {
													"type": "string"
												},
												"pid": {
													"type": "string"
												},
												"priority": {
													"type": "integer"
												},
												"role": {
													"type": "string"
												},
												"serialNumber": {
													"type": "string"
												},
												"softwareVersion": {
													"type": "string"
												},
												"stackNumber": {
													"type": "integer"
												},
												"state": {
													"type": "string"
												},
												"sudiSerialNumber": {
													"type": "string"
												}
											}
										}
									},
									"stackRingProtocol": {
										"type": "string"
									},
									"supportsStackWorkflows": {
										"type": "boolean"
									},
									"totalMemberCount": {
										"type": "integer"
									},
									"validLicenseLevels": {
										"type": "array",
										"items": {
											"type": "string"
										}
									}
								}
							},
							"state": {
								"type": "string",
								"enum": [
									"Unclaimed",
									"Planned",
									"Onboarding",
									"Provisioned",
									"Error",
									"Deleted"
								]
							},
							"sudiRequired": {
								"type": "boolean"
							},
							"tags": {
								"type": "object"
							},
							"userSudiSerialNos": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"virtualAccountId": {
								"type": "string"
							},
							"workflowId": {
								"type": "string"
							},
							"workflowName": {
								"type": "string"
							}
						}
					},
					"runSummaryList": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"details": {
									"type": "string"
								},
								"errorFlag": {
									"type": "boolean"
								},
								"historyTaskInfo": {
									"type": "object",
									"properties": {
										"addnDetails": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"key": {
														"type": "string"
													},
													"value": {
														"type": "string"
													}
												}
											}
										},
										"name": {
											"type": "string"
										},
										"timeTaken": {
											"type": "integer"
										},
										"type": {
											"type": "string"
										},
										"workItemList": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"command": {
														"type": "string"
													},
													"endTime": {
														"type": "integer"
													},
													"outputStr": {
														"type": "string"
													},
													"startTime": {
														"type": "integer"
													},
													"state": {
														"type": "string"
													},
													"timeTaken": {
														"type": "integer"
													}
												}
											}
										}
									}
								},
								"timestamp": {
									"type": "integer"
								}
							}
						}
					},
					"systemResetWorkflow": {
						"type": "object",
						"properties": {
							"_id": {
								"type": "string"
							},
							"addToInventory": {
								"type": "boolean"
							},
							"addedOn": {
								"type": "integer"
							},
							"configId": {
								"type": "string"
							},
							"currTaskIdx": {
								"type": "integer"
							},
							"description": {
								"type": "string"
							},
							"endTime": {
								"type": "integer"
							},
							"execTime": {
								"type": "integer"
							},
							"imageId": {
								"type": "string"
							},
							"lastupdateOn": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"startTime": {
								"type": "integer"
							},
							"state": {
								"type": "string"
							},
							"tasks": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"currWorkItemIdx": {
											"type": "integer"
										},
										"endTime": {
											"type": "integer"
										},
										"name": {
											"type": "string"
										},
										"startTime": {
											"type": "integer"
										},
										"state": {
											"type": "string"
										},
										"taskSeqNo": {
											"type": "integer"
										},
										"timeTaken": {
											"type": "integer"
										},
										"type": {
											"type": "string"
										},
										"workItemList": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"command": {
														"type": "string"
													},
													"endTime": {
														"type": "integer"
													},
													"outputStr": {
														"type": "string"
													},
													"startTime": {
														"type": "integer"
													},
													"state": {
														"type": "string"
													},
													"timeTaken": {
														"type": "integer"
													}
												}
											}
										}
									}
								}
							},
							"tenantId": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"useState": {
								"type": "string"
							},
							"version": {
								"type": "integer"
							}
						}
					},
					"systemWorkflow": {
						"type": "object",
						"properties": {
							"_id": {
								"type": "string"
							},
							"addToInventory": {
								"type": "boolean"
							},
							"addedOn": {
								"type": "integer"
							},
							"configId": {
								"type": "string"
							},
							"currTaskIdx": {
								"type": "integer"
							},
							"description": {
								"type": "string"
							},
							"endTime": {
								"type": "integer"
							},
							"execTime": {
								"type": "integer"
							},
							"imageId": {
								"type": "string"
							},
							"lastupdateOn": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"startTime": {
								"type": "integer"
							},
							"state": {
								"type": "string"
							},
							"tasks": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"currWorkItemIdx": {
											"type": "integer"
										},
										"endTime": {
											"type": "integer"
										},
										"name": {
											"type": "string"
										},
										"startTime": {
											"type": "integer"
										},
										"state": {
											"type": "string"
										},
										"taskSeqNo": {
											"type": "integer"
										},
										"timeTaken": {
											"type": "integer"
										},
										"type": {
											"type": "string"
										},
										"workItemList": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"command": {
														"type": "string"
													},
													"endTime": {
														"type": "integer"
													},
													"outputStr": {
														"type": "string"
													},
													"startTime": {
														"type": "integer"
													},
													"state": {
														"type": "string"
													},
													"timeTaken": {
														"type": "integer"
													}
												}
											}
										}
									}
								}
							},
							"tenantId": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"useState": {
								"type": "string"
							},
							"version": {
								"type": "integer"
							}
						}
					},
					"tenantId": {
						"type": "string"
					},
					"version": {
						"type": "integer"
					},
					"workflow": {
						"type": "object",
						"properties": {
							"_id": {
								"type": "string"
							},
							"addToInventory": {
								"type": "boolean"
							},
							"addedOn": {
								"type": "integer"
							},
							"configId": {
								"type": "string"
							},
							"currTaskIdx": {
								"type": "integer"
							},
							"description": {
								"type": "string"
							},
							"endTime": {
								"type": "integer"
							},
							"execTime": {
								"type": "integer"
							},
							"imageId": {
								"type": "string"
							},
							"lastupdateOn": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"startTime": {
								"type": "integer"
							},
							"state": {
								"type": "string"
							},
							"tasks": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"currWorkItemIdx": {
											"type": "integer"
										},
										"endTime": {
											"type": "integer"
										},
										"name": {
											"type": "string"
										},
										"startTime": {
											"type": "integer"
										},
										"state": {
											"type": "string"
										},
										"taskSeqNo": {
											"type": "integer"
										},
										"timeTaken": {
											"type": "integer"
										},
										"type": {
											"type": "string"
										},
										"workItemList": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"command": {
														"type": "string"
													},
													"endTime": {
														"type": "integer"
													},
													"outputStr": {
														"type": "string"
													},
													"startTime": {
														"type": "integer"
													},
													"state": {
														"type": "string"
													},
													"timeTaken": {
														"type": "integer"
													}
												}
											}
										}
									}
								}
							},
							"tenantId": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"useState": {
								"type": "string"
							},
							"version": {
								"type": "integer"
							}
						}
					},
					"workflowParameters": {
						"type": "object",
						"properties": {
							"configList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"configId": {
											"type": "string"
										},
										"configParameters": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"key": {
														"type": "string"
													},
													"value": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							},
							"licenseLevel": {
								"type": "string"
							},
							"licenseType": {
								"type": "string"
							},
							"topOfStackSerialNumber": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"CreateDeviceResponse": {
			"type": "object"
		},
		"Workflow": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"addToInventory": {
					"type": "boolean"
				},
				"addedOn": {
					"type": "integer"
				},
				"configId": {
					"type": "string"
				},
				"currTaskIdx": {
					"type": "integer"
				},
				"description": {
					"type": "string"
				},
				"endTime": {
					"type": "integer"
				},
				"execTime": {
					"type": "integer"
				},
				"imageId": {
					"type": "string"
				},
				"lastupdateOn": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"startTime": {
					"type": "integer"
				},
				"state": {
					"type": "string"
				},
				"tasks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"currWorkItemIdx": {
								"type": "integer"
							},
							"endTime": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"startTime": {
								"type": "integer"
							},
							"state": {
								"type": "string"
							},
							"taskSeqNo": {
								"type": "integer"
							},
							"timeTaken": {
								"type": "integer"
							},
							"type": {
								"type": "string"
							},
							"workItemList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"command": {
											"type": "string"
										},
										"endTime": {
											"type": "integer"
										},
										"outputStr": {
											"type": "string"
										},
										"startTime": {
											"type": "integer"
										},
										"state": {
											"type": "string"
										},
										"timeTaken": {
											"type": "integer"
										}
									}
								}
							}
						}
					}
				},
				"tenantId": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"useState": {
					"type": "string"
				},
				"version": {
					"type": "integer"
				}
			}
		},
		"UpdateWorkflowResponse": {
			"type": "object"
		},
		"TemplateDeploymentInfo": {
			"type": "object",
			"properties": {
				"targetInfo": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"hostName": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"params": {
								"type": "object",
								"properties": {}
							},
							"type": {
								"type": "string",
								"enum": [
									"MANAGED_DEVICE_IP",
									"MANAGED_DEVICE_UUID",
									"PRE_PROVISIONED_SERIAL",
									"PRE_PROVISIONED_MAC",
									"DEFAULT",
									"MANAGED_DEVICE_HOSTNAME"
								]
							}
						}
					}
				},
				"templateId": {
					"type": "string"
				}
			}
		},
		"TemplateDeploymentStatusDTO": {
			"type": "object",
			"properties": {
				"deploymentId": {
					"type": "string"
				},
				"deploymentName": {
					"type": "string"
				},
				"devices": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"deviceId": {
								"type": "string"
							},
							"duration": {
								"type": "string"
							},
							"endTime": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"startTime": {
								"type": "string"
							},
							"status": {
								"type": "string"
							}
						}
					}
				},
				"duration": {
					"type": "string"
				},
				"endTime": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"startTime": {
					"type": "string"
				},
				"status": {
					"type": "string"
				},
				"templateName": {
					"type": "string"
				},
				"templateVersion": {
					"type": "string"
				}
			}
		},
		"SNMPvWriteCommunityDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"writeCommunity": {
						"type": "string"
					}
				}
			}
		},
		"HTTPWriteCredentialDTO": {
			"type": "object",
			"properties": {
				"comments": {
					"type": "string"
				},
				"credentialType": {
					"type": "string",
					"enum": [
						"GLOBAL",
						"APP"
					]
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"instanceTenantId": {
					"type": "string"
				},
				"instanceUuid": {
					"type": "string"
				},
				"password": {
					"type": "string"
				},
				"port": {
					"type": "integer"
				},
				"secure": {
					"type": "boolean"
				},
				"username": {
					"type": "string"
				}
			}
		},
		"RawCliInfoNIOListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"cdpNeighbors": {
								"type": "string"
							},
							"healthMonitor": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"intfDescription": {
								"type": "string"
							},
							"inventory": {
								"type": "string"
							},
							"ipIntfBrief": {
								"type": "string"
							},
							"macAddressTable": {
								"type": "string"
							},
							"runningConfig": {
								"type": "string"
							},
							"snmp": {
								"type": "string"
							},
							"version": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GlobalCredentialSubTypeResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "string"
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"apManagerInterfaceIp": {
								"type": "string"
							},
							"associatedWlcIp": {
								"type": "string"
							},
							"bootDateTime": {
								"type": "string"
							},
							"collectionInterval": {
								"type": "string"
							},
							"collectionStatus": {
								"type": "string"
							},
							"errorCode": {
								"type": "string"
							},
							"errorDescription": {
								"type": "string"
							},
							"family": {
								"type": "string"
							},
							"hostname": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"interfaceCount": {
								"type": "string"
							},
							"inventoryStatusDetail": {
								"type": "string"
							},
							"lastUpdateTime": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"lineCardCount": {
								"type": "string"
							},
							"lineCardId": {
								"type": "string"
							},
							"location": {
								"type": "string"
							},
							"locationName": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"managementIpAddress": {
								"type": "string"
							},
							"memorySize": {
								"type": "string"
							},
							"platformId": {
								"type": "string"
							},
							"reachabilityFailureReason": {
								"type": "string"
							},
							"reachabilityStatus": {
								"type": "string"
							},
							"role": {
								"type": "string"
							},
							"roleSource": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"series": {
								"type": "string"
							},
							"snmpContact": {
								"type": "string"
							},
							"snmpLocation": {
								"type": "string"
							},
							"softwareType": {
								"type": "string"
							},
							"softwareVersion": {
								"type": "string"
							},
							"tagCount": {
								"type": "string"
							},
							"tunnelUdpPort": {
								"type": "string"
							},
							"type": {
								"type": "string"
							},
							"upTime": {
								"type": "string"
							},
							"waasDeviceMode": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceBriefNIOResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"role": {
							"type": "string"
						},
						"roleSource": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeviceIfResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"adminStatus": {
							"type": "string"
						},
						"className": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"deviceId": {
							"type": "string"
						},
						"duplex": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"ifIndex": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"interfaceType": {
							"type": "string"
						},
						"ipv4Address": {
							"type": "string"
						},
						"ipv4Mask": {
							"type": "string"
						},
						"isisSupport": {
							"type": "string"
						},
						"lastUpdated": {
							"type": "string"
						},
						"macAddress": {
							"type": "string"
						},
						"mappedPhysicalInterfaceId": {
							"type": "string"
						},
						"mappedPhysicalInterfaceName": {
							"type": "string"
						},
						"mediaType": {
							"type": "string"
						},
						"nativeVlanId": {
							"type": "string"
						},
						"ospfSupport": {
							"type": "string"
						},
						"pid": {
							"type": "string"
						},
						"portMode": {
							"type": "string"
						},
						"portName": {
							"type": "string"
						},
						"portType": {
							"type": "string"
						},
						"serialNo": {
							"type": "string"
						},
						"series": {
							"type": "string"
						},
						"speed": {
							"type": "string"
						},
						"status": {
							"type": "string"
						},
						"vlanId": {
							"type": "string"
						},
						"voiceVlan": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DiscoveryNIOListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"cdpLevel": {
								"type": "integer"
							},
							"deviceIds": {
								"type": "string"
							},
							"discoveryCondition": {
								"type": "string"
							},
							"discoveryStatus": {
								"type": "string"
							},
							"discoveryType": {
								"type": "string"
							},
							"enablePasswordList": {
								"type": "string"
							},
							"globalCredentialIdList": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"httpReadCredential": {
								"type": "object",
								"properties": {
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"description": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"port": {
										"type": "integer"
									},
									"secure": {
										"type": "boolean"
									},
									"username": {
										"type": "string"
									}
								}
							},
							"httpWriteCredential": {
								"type": "object",
								"properties": {
									"comments": {
										"type": "string"
									},
									"credentialType": {
										"type": "string",
										"enum": [
											"GLOBAL",
											"APP"
										]
									},
									"description": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"instanceTenantId": {
										"type": "string"
									},
									"instanceUuid": {
										"type": "string"
									},
									"password": {
										"type": "string"
									},
									"port": {
										"type": "integer"
									},
									"secure": {
										"type": "boolean"
									},
									"username": {
										"type": "string"
									}
								}
							},
							"id": {
								"type": "string"
							},
							"ipAddressList": {
								"type": "string"
							},
							"ipFilterList": {
								"type": "string"
							},
							"isAutoCdp": {
								"type": "boolean"
							},
							"lldpLevel": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"netconfPort": {
								"type": "string"
							},
							"numDevices": {
								"type": "integer"
							},
							"parentDiscoveryId": {
								"type": "string"
							},
							"passwordList": {
								"type": "string"
							},
							"preferredMgmtIPMethod": {
								"type": "string"
							},
							"protocolOrder": {
								"type": "string"
							},
							"retryCount": {
								"type": "integer"
							},
							"snmpAuthPassphrase": {
								"type": "string"
							},
							"snmpAuthProtocol": {
								"type": "string"
							},
							"snmpMode": {
								"type": "string"
							},
							"snmpPrivPassphrase": {
								"type": "string"
							},
							"snmpPrivProtocol": {
								"type": "string"
							},
							"snmpRoCommunity": {
								"type": "string"
							},
							"snmpRoCommunityDesc": {
								"type": "string"
							},
							"snmpRwCommunity": {
								"type": "string"
							},
							"snmpRwCommunityDesc": {
								"type": "string"
							},
							"snmpUserName": {
								"type": "string"
							},
							"timeOut": {
								"type": "integer"
							},
							"updateMgmtIp": {
								"type": "boolean"
							},
							"userNameList": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SiteResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"sites": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"displayName": {
										"type": "string"
									},
									"groupNameHierarchy": {
										"type": "string"
									},
									"id": {
										"type": "string"
									},
									"latitude": {
										"type": "string"
									},
									"locationAddress": {
										"type": "string"
									},
									"locationCountry": {
										"type": "string"
									},
									"locationType": {
										"type": "string"
									},
									"longitude": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"parentId": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"TaskDTOListResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"additionalStatusURL": {
								"type": "string"
							},
							"data": {
								"type": "string"
							},
							"endTime": {
								"type": "string"
							},
							"errorCode": {
								"type": "string"
							},
							"errorKey": {
								"type": "string"
							},
							"failureReason": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"isError": {
								"type": "boolean"
							},
							"lastUpdate": {
								"type": "string"
							},
							"operationIdList": {
								"type": "object"
							},
							"parentId": {
								"type": "string"
							},
							"progress": {
								"type": "string"
							},
							"rootId": {
								"type": "string"
							},
							"serviceType": {
								"type": "string"
							},
							"startTime": {
								"type": "string"
							},
							"username": {
								"type": "string"
							},
							"version": {
								"type": "integer"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DistributeDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"deviceUuid": {
						"type": "string"
					},
					"imageUuid": {
						"type": "string"
					}
				}
			}
		},
		"LegitCliKeyResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetDeviceCountResponse": {
			"type": "object"
		},
		"DeregisterVirtualAccountResponse": {
			"type": "object"
		},
		"SyncVirtualAccountDevicesResponse": {
			"type": "object"
		},
		"GetSmartAccountListResponse": {
			"type": "object"
		},
		"GetSyncResultForVirtualAccountResponse": {
			"type": "object"
		},
		"GetWorkflowCountResponse": {
			"type": "object"
		},
		"ClientDetailResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"detail": {
							"type": "object",
							"properties": {
								"id": {
									"type": "string"
								},
								"connectionStatus": {
									"type": "string"
								},
								"hostType": {
									"type": "string"
								},
								"userId": {
									"type": "string"
								},
								"hostName": {
									"type": "string"
								},
								"hostOs": {
									"type": "string"
								},
								"hostVersion": {
									"type": "string"
								},
								"subType": {
									"type": "string"
								},
								"lastUpdated": {
									"type": "string"
								},
								"healthScore": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"healthType": {
												"type": "string"
											},
											"reason": {
												"type": "string"
											},
											"score": {
												"type": "string"
											}
										}
									}
								},
								"hostMac": {
									"type": "string"
								},
								"hostIpV4": {
									"type": "string"
								},
								"hostIpV6": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"authType": {
									"type": "string"
								},
								"vlanId": {
									"type": "string"
								},
								"ssid": {
									"type": "string"
								},
								"frequency": {
									"type": "string"
								},
								"channel": {
									"type": "string"
								},
								"apGroup": {
									"type": "string"
								},
								"location": {
									"type": "string"
								},
								"clientConnection": {
									"type": "string"
								},
								"connectedDevice": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"issueCount": {
									"type": "string"
								},
								"rssi": {
									"type": "string"
								},
								"avgRssi": {
									"type": "string"
								},
								"snr": {
									"type": "string"
								},
								"avgSnr": {
									"type": "string"
								},
								"dataRate": {
									"type": "string"
								},
								"txBytes": {
									"type": "string"
								},
								"rxBytes": {
									"type": "string"
								},
								"dnsSuccess": {
									"type": "string"
								},
								"dnsFailure": {
									"type": "string"
								},
								"onboarding": {
									"type": "object",
									"properties": {
										"averageRunDuration": {
											"type": "string"
										},
										"maxRunDuration": {
											"type": "string"
										},
										"averageAssocDuration": {
											"type": "string"
										},
										"maxAssocDuration": {
											"type": "string"
										},
										"averageAuthDuration": {
											"type": "string"
										},
										"maxAuthDuration": {
											"type": "string"
										},
										"averageDhcpDuration": {
											"type": "string"
										},
										"maxDhcpDuration": {
											"type": "string"
										},
										"aaaServerIp": {
											"type": "string"
										},
										"dhcpServerIp": {
											"type": "string"
										},
										"authDoneTime": {
											"type": "string"
										},
										"assocDoneTime": {
											"type": "string"
										},
										"dhcpDoneTime": {
											"type": "string"
										}
									}
								},
								"onboardingTime": {
									"type": "string"
								},
								"port": {
									"type": "string"
								}
							}
						},
						"connectionInfo": {
							"type": "object",
							"properties": {
								"hostType": {
									"type": "string"
								},
								"nwDeviceName": {
									"type": "string"
								},
								"nwDeviceMac": {
									"type": "string"
								},
								"protocol": {
									"type": "string"
								},
								"band": {
									"type": "string"
								},
								"spatialStream": {
									"type": "string"
								},
								"channel": {
									"type": "string"
								},
								"channelWidth": {
									"type": "string"
								},
								"wmm": {
									"type": "string"
								},
								"uapsd": {
									"type": "string"
								},
								"timestamp": {
									"type": "string"
								}
							}
						},
						"topology": {
							"type": "object",
							"properties": {
								"nodes": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"role": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"description": {
												"type": "string"
											},
											"deviceType": {
												"type": "string"
											},
											"platformId": {
												"type": "string"
											},
											"family": {
												"type": "string"
											},
											"ip": {
												"type": "string"
											},
											"softwareVersion": {
												"type": "string"
											},
											"userId": {
												"type": "string"
											},
											"nodeType": {
												"type": "string"
											},
											"radioFrequency": {
												"type": "string"
											},
											"clients": {
												"type": "string"
											},
											"count": {
												"type": "string"
											},
											"healthScore": {
												"type": "string"
											},
											"level": {
												"type": "string"
											},
											"fabricGroup": {
												"type": "string"
											},
											"connectedDevice": {
												"type": "string"
											}
										}
									}
								},
								"links": {
									"type": "array",
									"items": {
										"type": "object",
										"properties": {
											"source": {
												"type": "string"
											},
											"linkStatus": {
												"type": "string"
											},
											"label": {
												"type": "array",
												"items": {
													"type": "string"
												}
											},
											"target": {
												"type": "string"
											},
											"id": {
												"type": "string"
											},
											"portUtilization": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"TemplateDTO": {
			"type": "object",
			"properties": {
				"author": {
					"type": "string"
				},
				"createTime": {
					"type": "integer"
				},
				"description": {
					"type": "string"
				},
				"deviceTypes": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"productFamily": {
								"type": "string"
							},
							"productSeries": {
								"type": "string"
							},
							"productType": {
								"type": "string"
							}
						}
					}
				},
				"id": {
					"type": "string"
				},
				"lastUpdateTime": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"parentTemplateId": {
					"type": "string"
				},
				"projectId": {
					"type": "string"
				},
				"projectName": {
					"type": "string"
				},
				"rollbackTemplateContent": {
					"type": "string"
				},
				"rollbackTemplateParams": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"dataType": {
								"type": "string",
								"enum": [
									"STRING",
									"INTEGER",
									"IPADDRESS",
									"MACADDRESS",
									"SECTIONDIVIDER"
								]
							},
							"defaultValue": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"group": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instructionText": {
								"type": "string"
							},
							"key": {
								"type": "string"
							},
							"order": {
								"type": "integer"
							},
							"parameterName": {
								"type": "string"
							},
							"provider": {
								"type": "string"
							},
							"range": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"maxValue": {
											"type": "integer"
										},
										"minValue": {
											"type": "integer"
										}
									}
								}
							},
							"required": {
								"type": "boolean"
							},
							"selection": {
								"type": "object"
							}
						}
					}
				},
				"softwareType": {
					"type": "string"
				},
				"softwareVariant": {
					"type": "string"
				},
				"softwareVersion": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"templateContent": {
					"type": "string"
				},
				"templateParams": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"dataType": {
								"type": "string",
								"enum": [
									"STRING",
									"INTEGER",
									"IPADDRESS",
									"MACADDRESS",
									"SECTIONDIVIDER"
								]
							},
							"defaultValue": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"displayName": {
								"type": "string"
							},
							"group": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instructionText": {
								"type": "string"
							},
							"key": {
								"type": "string"
							},
							"order": {
								"type": "integer"
							},
							"parameterName": {
								"type": "string"
							},
							"provider": {
								"type": "string"
							},
							"range": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"id": {
											"type": "string"
										},
										"maxValue": {
											"type": "integer"
										},
										"minValue": {
											"type": "integer"
										}
									}
								}
							},
							"required": {
								"type": "boolean"
							},
							"selection": {
								"type": "object"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceDetailResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"managementIpAddr": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"nwDeviceName": {
							"type": "string"
						},
						"opState": {
							"type": "string"
						},
						"platformId": {
							"type": "string"
						},
						"nwDeviceId": {
							"type": "string"
						},
						"sysUptime": {
							"type": "string"
						},
						"mode": {
							"type": "string"
						},
						"resetReason": {
							"type": "string"
						},
						"nwDeviceRole": {
							"type": "string"
						},
						"upTime": {
							"type": "string"
						},
						"nwDeviceFamily": {
							"type": "string"
						},
						"macAddress": {
							"type": "string"
						},
						"connectedTime": {
							"type": "string"
						},
						"softwareVersion": {
							"type": "string"
						},
						"subMode": {
							"type": "string"
						},
						"nwDeviceType": {
							"type": "string"
						},
						"overallHealth": {
							"type": "string"
						},
						"memoryScore": {
							"type": "string"
						},
						"cpuScore": {
							"type": "string"
						}
					}
				}
			}
		},
		"SiteHierarchyResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"siteName": {
								"type": "string"
							},
							"siteId": {
								"type": "string"
							},
							"parentSiteId": {
								"type": "string"
							},
							"parentSiteName": {
								"type": "string"
							},
							"siteType": {
								"type": "string"
							},
							"healthyNetworkDevicePercentage": {
								"type": "string"
							},
							"healthyClientsPercentage": {
								"type": "string"
							},
							"clientHealthWired": {
								"type": "string"
							},
							"clientHealthWireless": {
								"type": "string"
							},
							"numberOfClients": {
								"type": "string"
							},
							"clientNumberOfIssues": {
								"type": "string"
							},
							"networkNumberOfIssues": {
								"type": "string"
							},
							"numberOfNetworkDevice": {
								"type": "string"
							},
							"networkHealthAverage": {
								"type": "string"
							},
							"networkHealthAccess": {
								"type": "string"
							},
							"networkHealthCore": {
								"type": "string"
							},
							"networkHealthDistribution": {
								"type": "string"
							},
							"networkHealthRouter": {
								"type": "string"
							},
							"networkHealthWireless": {
								"type": "string"
							},
							"networkHealthOthers": {
								"type": "string"
							},
							"numberOfWiredClients": {
								"type": "string"
							},
							"numberOfWirelessClients": {
								"type": "string"
							},
							"wiredGoodClients": {
								"type": "string"
							},
							"wirelessGoodClients": {
								"type": "string"
							},
							"clientIssueCount": {
								"type": "string"
							},
							"overallGoodDevices": {
								"type": "string"
							},
							"accessGoodCount": {
								"type": "string"
							},
							"accessTotalCount": {
								"type": "string"
							},
							"coreGoodCount": {
								"type": "string"
							},
							"coreTotalCount": {
								"type": "string"
							},
							"distributionGoodCount": {
								"type": "string"
							},
							"distributionTotalCount": {
								"type": "string"
							},
							"routerGoodCount": {
								"type": "string"
							},
							"routerTotalCount": {
								"type": "string"
							},
							"wirelessDeviceGoodCount": {
								"type": "string"
							},
							"wirelessDeviceTotalCount": {
								"type": "string"
							},
							"applicationHealth": {
								"type": "string"
							},
							"applicationGoodCount": {
								"type": "string"
							},
							"applicationTotalCount": {
								"type": "string"
							},
							"applicationBytesTotalCount": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"NetconfCredentialDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"comments": {
						"type": "string"
					},
					"credentialType": {
						"type": "string",
						"enum": [
							"GLOBAL",
							"APP"
						]
					},
					"description": {
						"type": "string"
					},
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"netconfPort": {
						"type": "string"
					}
				}
			}
		},
		"SystemPropertyListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							},
							"intValue": {
								"type": "integer"
							},
							"systemPropertyName": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ModuleResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"assemblyNumber": {
							"type": "string"
						},
						"assemblyRevision": {
							"type": "string"
						},
						"attributeInfo": {
							"type": "object",
							"properties": {}
						},
						"containmentEntity": {
							"type": "string"
						},
						"description": {
							"type": "string"
						},
						"entityPhysicalIndex": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"isFieldReplaceable": {
							"type": "string",
							"enum": [
								"UNKNOWN",
								"TRUE",
								"FALSE",
								"NOT_APPLICABLE"
							]
						},
						"isReportingAlarmsAllowed": {
							"type": "string",
							"enum": [
								"UNKNOWN",
								"TRUE",
								"FALSE",
								"NOT_APPLICABLE"
							]
						},
						"manufacturer": {
							"type": "string"
						},
						"moduleIndex": {
							"type": "integer"
						},
						"name": {
							"type": "string"
						},
						"operationalStateCode": {
							"type": "string"
						},
						"partNumber": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"vendorEquipmentType": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"apManagerInterfaceIp": {
							"type": "string"
						},
						"associatedWlcIp": {
							"type": "string"
						},
						"bootDateTime": {
							"type": "string"
						},
						"collectionInterval": {
							"type": "string"
						},
						"collectionStatus": {
							"type": "string"
						},
						"errorCode": {
							"type": "string"
						},
						"errorDescription": {
							"type": "string"
						},
						"family": {
							"type": "string"
						},
						"hostname": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"interfaceCount": {
							"type": "string"
						},
						"inventoryStatusDetail": {
							"type": "string"
						},
						"lastUpdateTime": {
							"type": "string"
						},
						"lastUpdated": {
							"type": "string"
						},
						"lineCardCount": {
							"type": "string"
						},
						"lineCardId": {
							"type": "string"
						},
						"location": {
							"type": "string"
						},
						"locationName": {
							"type": "string"
						},
						"macAddress": {
							"type": "string"
						},
						"managementIpAddress": {
							"type": "string"
						},
						"memorySize": {
							"type": "string"
						},
						"platformId": {
							"type": "string"
						},
						"reachabilityFailureReason": {
							"type": "string"
						},
						"reachabilityStatus": {
							"type": "string"
						},
						"role": {
							"type": "string"
						},
						"roleSource": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"series": {
							"type": "string"
						},
						"snmpContact": {
							"type": "string"
						},
						"snmpLocation": {
							"type": "string"
						},
						"softwareType": {
							"type": "string"
						},
						"softwareVersion": {
							"type": "string"
						},
						"tagCount": {
							"type": "string"
						},
						"tunnelUdpPort": {
							"type": "string"
						},
						"type": {
							"type": "string"
						},
						"upTime": {
							"type": "string"
						},
						"waasDeviceMode": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ExportDeviceDTO": {
			"type": "object",
			"properties": {
				"deviceUuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"id": {
					"type": "string"
				},
				"operationEnum": {
					"type": "string",
					"enum": [
						"CREDENTIALDETAILS",
						"DEVICEDETAILS"
					]
				},
				"parameters": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"password": {
					"type": "string"
				}
			}
		},
		"DiscoveryNIO": {
			"type": "object",
			"properties": {
				"attributeInfo": {
					"type": "object",
					"properties": {}
				},
				"cdpLevel": {
					"type": "integer"
				},
				"deviceIds": {
					"type": "string"
				},
				"discoveryCondition": {
					"type": "string"
				},
				"discoveryStatus": {
					"type": "string"
				},
				"discoveryType": {
					"type": "string"
				},
				"enablePasswordList": {
					"type": "string"
				},
				"globalCredentialIdList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"httpReadCredential": {
					"type": "object",
					"properties": {
						"comments": {
							"type": "string"
						},
						"credentialType": {
							"type": "string",
							"enum": [
								"GLOBAL",
								"APP"
							]
						},
						"description": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"secure": {
							"type": "boolean"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"httpWriteCredential": {
					"type": "object",
					"properties": {
						"comments": {
							"type": "string"
						},
						"credentialType": {
							"type": "string",
							"enum": [
								"GLOBAL",
								"APP"
							]
						},
						"description": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"secure": {
							"type": "boolean"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"id": {
					"type": "string"
				},
				"ipAddressList": {
					"type": "string"
				},
				"ipFilterList": {
					"type": "string"
				},
				"isAutoCdp": {
					"type": "boolean"
				},
				"lldpLevel": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"netconfPort": {
					"type": "string"
				},
				"numDevices": {
					"type": "integer"
				},
				"parentDiscoveryId": {
					"type": "string"
				},
				"passwordList": {
					"type": "string"
				},
				"preferredMgmtIPMethod": {
					"type": "string"
				},
				"protocolOrder": {
					"type": "string"
				},
				"retryCount": {
					"type": "integer"
				},
				"snmpAuthPassphrase": {
					"type": "string"
				},
				"snmpAuthProtocol": {
					"type": "string"
				},
				"snmpMode": {
					"type": "string"
				},
				"snmpPrivPassphrase": {
					"type": "string"
				},
				"snmpPrivProtocol": {
					"type": "string"
				},
				"snmpRoCommunity": {
					"type": "string"
				},
				"snmpRoCommunityDesc": {
					"type": "string"
				},
				"snmpRwCommunity": {
					"type": "string"
				},
				"snmpRwCommunityDesc": {
					"type": "string"
				},
				"snmpUserName": {
					"type": "string"
				},
				"timeOut": {
					"type": "integer"
				},
				"updateMgmtIp": {
					"type": "boolean"
				},
				"userNameList": {
					"type": "string"
				}
			}
		},
		"TopologyResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"id": {
							"type": "string"
						},
						"links": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"additionalInfo": {
										"type": "object",
										"properties": {}
									},
									"endPortID": {
										"type": "string"
									},
									"endPortIpv4Address": {
										"type": "string"
									},
									"endPortIpv4Mask": {
										"type": "string"
									},
									"endPortName": {
										"type": "string"
									},
									"endPortSpeed": {
										"type": "string"
									},
									"greyOut": {
										"type": "boolean"
									},
									"id": {
										"type": "string"
									},
									"linkStatus": {
										"type": "string"
									},
									"source": {
										"type": "string"
									},
									"startPortID": {
										"type": "string"
									},
									"startPortIpv4Address": {
										"type": "string"
									},
									"startPortIpv4Mask": {
										"type": "string"
									},
									"startPortName": {
										"type": "string"
									},
									"startPortSpeed": {
										"type": "string"
									},
									"tag": {
										"type": "string"
									},
									"target": {
										"type": "string"
									}
								}
							}
						},
						"nodes": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"aclApplied": {
										"type": "boolean"
									},
									"additionalInfo": {
										"type": "object",
										"properties": {}
									},
									"customParam": {
										"type": "object",
										"properties": {
											"id": {
												"type": "string"
											},
											"label": {
												"type": "string"
											},
											"parentNodeId": {
												"type": "string"
											},
											"x": {
												"type": "integer"
											},
											"y": {
												"type": "integer"
											}
										}
									},
									"dataPathId": {
										"type": "string"
									},
									"deviceType": {
										"type": "string"
									},
									"family": {
										"type": "string"
									},
									"fixed": {
										"type": "boolean"
									},
									"greyOut": {
										"type": "boolean"
									},
									"id": {
										"type": "string"
									},
									"ip": {
										"type": "string"
									},
									"label": {
										"type": "string"
									},
									"networkType": {
										"type": "string"
									},
									"nodeType": {
										"type": "string"
									},
									"order": {
										"type": "integer"
									},
									"osType": {
										"type": "string"
									},
									"platformId": {
										"type": "string"
									},
									"role": {
										"type": "string"
									},
									"roleSource": {
										"type": "string"
									},
									"softwareVersion": {
										"type": "string"
									},
									"tags": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"upperNode": {
										"type": "string"
									},
									"userId": {
										"type": "string"
									},
									"vlanId": {
										"type": "string"
									},
									"x": {
										"type": "integer"
									},
									"y": {
										"type": "integer"
									}
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"FileObjectListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"downloadPath": {
								"type": "string"
							},
							"encrypted": {
								"type": "boolean"
							},
							"fileFormat": {
								"type": "string"
							},
							"fileSize": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"md5Checksum": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"nameSpace": {
								"type": "string"
							},
							"sftpServerList": {
								"type": "array",
								"items": {
									"type": "object"
								}
							},
							"sha1Checksum": {
								"type": "string"
							},
							"taskId": {
								"type": "object"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"GetDeviceByIDResponse": {
			"type": "object"
		},
		"ViewSettingsResponse": {
			"type": "object"
		},
		"GetDeviceHistoryResponse": {
			"type": "object"
		},
		"ListWorkflowsResponse": {
			"type": "object"
		},
		"UpdateDeviceResponse": {
			"type": "object"
		},
		"ProjectDTO": {
			"type": "object",
			"properties": {
				"createTime": {
					"type": "integer"
				},
				"description": {
					"type": "string"
				},
				"id": {
					"type": "string"
				},
				"lastUpdateTime": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"tags": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"templates": {
					"type": "object"
				}
			}
		},
		"TemplatePreviewRequestDTO": {
			"type": "object",
			"properties": {
				"params": {
					"type": "object",
					"properties": {}
				},
				"templateId": {
					"type": "string"
				}
			}
		},
		"TemplatePreviewResponseDTO": {
			"type": "object",
			"properties": {
				"cliPreview": {
					"type": "string"
				},
				"templateId": {
					"type": "string"
				}
			}
		},
		"DeleteSSIDResponse": {
			"type": "object",
			"properties": {
				"isError": {
					"type": "boolean"
				},
				"failureReason": {
					"type": "string"
				},
				"successMessage": {
					"type": "string"
				}
			}
		},
		"SitesInfoDTO": {
			"type": "object",
			"properties": {
				"siteUuids": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"WirelessInfoResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"adminEnabledPorts": {
							"type": "array",
							"items": {
								"type": "integer"
							}
						},
						"apGroupName": {
							"type": "string"
						},
						"deviceId": {
							"type": "string"
						},
						"ethMacAddress": {
							"type": "string"
						},
						"flexGroupName": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"lagModeEnabled": {
							"type": "boolean"
						},
						"netconfEnabled": {
							"type": "boolean"
						},
						"wirelessLicenseInfo": {
							"type": "string",
							"enum": [
								"ADVANTAGE",
								"ESSENTIALS"
							]
						},
						"wirelessPackageInstalled": {
							"type": "boolean"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"RegisterNetworkDeviceResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"macAddress": {
							"type": "string"
						},
						"modelNumber": {
							"type": "string"
						},
						"name": {
							"type": "string"
						},
						"serialNumber": {
							"type": "string"
						},
						"tenantId": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DiscoveryJobNIOListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"cliStatus": {
								"type": "string"
							},
							"discoveryStatus": {
								"type": "string"
							},
							"endTime": {
								"type": "string"
							},
							"httpStatus": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"inventoryCollectionStatus": {
								"type": "string"
							},
							"inventoryReachabilityStatus": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"jobStatus": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"netconfStatus": {
								"type": "string"
							},
							"pingStatus": {
								"type": "string"
							},
							"snmpStatus": {
								"type": "string"
							},
							"startTime": {
								"type": "string"
							},
							"taskId": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceNIOListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"anchorWlcForAp": {
								"type": "string"
							},
							"authModelId": {
								"type": "string"
							},
							"avgUpdateFrequency": {
								"type": "integer"
							},
							"bootDateTime": {
								"type": "string"
							},
							"cliStatus": {
								"type": "string"
							},
							"duplicateDeviceId": {
								"type": "string"
							},
							"errorCode": {
								"type": "string"
							},
							"errorDescription": {
								"type": "string"
							},
							"family": {
								"type": "string"
							},
							"hostname": {
								"type": "string"
							},
							"httpStatus": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"imageName": {
								"type": "string"
							},
							"ingressQueueConfig": {
								"type": "string"
							},
							"interfaceCount": {
								"type": "string"
							},
							"inventoryCollectionStatus": {
								"type": "string"
							},
							"inventoryReachabilityStatus": {
								"type": "string"
							},
							"lastUpdated": {
								"type": "string"
							},
							"lineCardCount": {
								"type": "string"
							},
							"lineCardId": {
								"type": "string"
							},
							"location": {
								"type": "string"
							},
							"locationName": {
								"type": "string"
							},
							"macAddress": {
								"type": "string"
							},
							"managementIpAddress": {
								"type": "string"
							},
							"memorySize": {
								"type": "string"
							},
							"netconfStatus": {
								"type": "string"
							},
							"numUpdates": {
								"type": "integer"
							},
							"pingStatus": {
								"type": "string"
							},
							"platformId": {
								"type": "string"
							},
							"portRange": {
								"type": "string"
							},
							"qosStatus": {
								"type": "string"
							},
							"reachabilityFailureReason": {
								"type": "string"
							},
							"reachabilityStatus": {
								"type": "string"
							},
							"role": {
								"type": "string"
							},
							"roleSource": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"snmpContact": {
								"type": "string"
							},
							"snmpLocation": {
								"type": "string"
							},
							"snmpStatus": {
								"type": "string"
							},
							"softwareVersion": {
								"type": "string"
							},
							"tag": {
								"type": "string"
							},
							"tagCount": {
								"type": "integer"
							},
							"type": {
								"type": "string"
							},
							"upTime": {
								"type": "string"
							},
							"vendor": {
								"type": "string"
							},
							"wlcApDeviceStatus": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DownloadsAFileReferredByTheFileIdResponse": {
			"type": "object"
		},
		"ImageInfoListResponse": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"applicableDevicesForImage": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"mdfId": {
											"type": "string"
										},
										"productId": {
											"type": "array",
											"items": {
												"type": "string"
											}
										},
										"productName": {
											"type": "string"
										}
									}
								}
							},
							"applicationType": {
								"type": "string"
							},
							"createdTime": {
								"type": "string"
							},
							"extendedAttributes": {
								"type": "object",
								"properties": {}
							},
							"family": {
								"type": "string"
							},
							"feature": {
								"type": "string"
							},
							"fileServiceId": {
								"type": "string"
							},
							"fileSize": {
								"type": "string"
							},
							"imageIntegrityStatus": {
								"type": "string"
							},
							"imageName": {
								"type": "string"
							},
							"imageSeries": {
								"type": "array",
								"items": {
									"type": "string"
								}
							},
							"imageSource": {
								"type": "string"
							},
							"imageType": {
								"type": "string"
							},
							"imageUuid": {
								"type": "string"
							},
							"importSourceType": {
								"type": "string",
								"enum": [
									"DEVICE",
									"REMOTEURL",
									"CCO",
									"FILESYSTEM"
								]
							},
							"isTaggedGolden": {
								"type": "boolean"
							},
							"md5Checksum": {
								"type": "string"
							},
							"name": {
								"type": "string"
							},
							"profileInfo": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"description": {
											"type": "string"
										},
										"extendedAttributes": {
											"type": "object",
											"properties": {}
										},
										"memory": {
											"type": "integer"
										},
										"productType": {
											"type": "string"
										},
										"profileName": {
											"type": "string"
										},
										"shares": {
											"type": "integer"
										},
										"vCpu": {
											"type": "integer"
										}
									}
								}
							},
							"shaCheckSum": {
								"type": "string"
							},
							"vendor": {
								"type": "string"
							},
							"version": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"CreateWorkflowResponse": {
			"type": "object"
		},
		"Settings": {
			"type": "object",
			"properties": {
				"_id": {
					"type": "string"
				},
				"aaaCredentials": {
					"type": "object",
					"properties": {
						"password": {
							"type": "string"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"acceptEula": {
					"type": "boolean"
				},
				"defaultProfile": {
					"type": "object",
					"properties": {
						"cert": {
							"type": "string"
						},
						"fqdnAddresses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"ipAddresses": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"port": {
							"type": "integer"
						},
						"proxy": {
							"type": "boolean"
						}
					}
				},
				"savaMappingList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"autoSyncPeriod": {
								"type": "integer"
							},
							"ccoUser": {
								"type": "string"
							},
							"expiry": {
								"type": "integer"
							},
							"lastSync": {
								"type": "integer"
							},
							"profile": {
								"type": "object",
								"properties": {
									"addressFqdn": {
										"type": "string"
									},
									"addressIpV4": {
										"type": "string"
									},
									"cert": {
										"type": "string"
									},
									"makeDefault": {
										"type": "boolean"
									},
									"name": {
										"type": "string"
									},
									"port": {
										"type": "integer"
									},
									"profileId": {
										"type": "string"
									},
									"proxy": {
										"type": "boolean"
									}
								}
							},
							"smartAccountId": {
								"type": "string"
							},
							"syncResult": {
								"type": "object",
								"properties": {
									"syncList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"deviceSnList": {
													"type": "array",
													"items": {
														"type": "string"
													}
												},
												"syncType": {
													"type": "string",
													"enum": [
														"Add",
														"Update",
														"Delete",
														"MismatchError"
													]
												}
											}
										}
									},
									"syncMsg": {
										"type": "string"
									}
								}
							},
							"syncResultStr": {
								"type": "string"
							},
							"syncStartTime": {
								"type": "integer"
							},
							"syncStatus": {
								"type": "string",
								"enum": [
									"NOT_SYNCED",
									"SYNCING",
									"SUCCESS",
									"FAILURE"
								]
							},
							"tenantId": {
								"type": "string"
							},
							"token": {
								"type": "string"
							},
							"virtualAccountId": {
								"type": "string"
							}
						}
					}
				},
				"taskTimeOuts": {
					"type": "object",
					"properties": {
						"configTimeOut": {
							"type": "integer"
						},
						"generalTimeOut": {
							"type": "integer"
						},
						"imageDownloadTimeOut": {
							"type": "integer"
						}
					}
				},
				"tenantId": {
					"type": "string"
				},
				"version": {
					"type": "integer"
				}
			}
		},
		"UpdateSettingsResponse": {
			"type": "object"
		},
		"GetCategorizedDeviceCountResponse": {
			"type": "object"
		},
		"ListDevicesResponse": {
			"type": "object"
		},
		"PathResponseResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"detailedStatus": {
							"type": "object",
							"properties": {
								"aclTraceCalculation": {
									"type": "string"
								},
								"aclTraceCalculationFailureReason": {
									"type": "string"
								}
							}
						},
						"lastUpdate": {
							"type": "string"
						},
						"networkElements": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"accuracyList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"percent": {
													"type": "integer"
												},
												"reason": {
													"type": "string"
												}
											}
										}
									},
									"detailedStatus": {
										"type": "object",
										"properties": {
											"aclTraceCalculation": {
												"type": "string"
											},
											"aclTraceCalculationFailureReason": {
												"type": "string"
											}
										}
									},
									"deviceStatistics": {
										"type": "object",
										"properties": {
											"cpuStatistics": {
												"type": "object",
												"properties": {
													"fiveMinUsageInPercentage": {
														"type": "number"
													},
													"fiveSecsUsageInPercentage": {
														"type": "number"
													},
													"oneMinUsageInPercentage": {
														"type": "number"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"memoryStatistics": {
												"type": "object",
												"properties": {
													"memoryUsage": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													},
													"totalMemory": {
														"type": "integer"
													}
												}
											}
										}
									},
									"deviceStatsCollection": {
										"type": "string"
									},
									"deviceStatsCollectionFailureReason": {
										"type": "string"
									},
									"egressPhysicalInterface": {
										"type": "object",
										"properties": {
											"aclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"id": {
												"type": "string"
											},
											"interfaceStatistics": {
												"type": "object",
												"properties": {
													"adminStatus": {
														"type": "string"
													},
													"inputPackets": {
														"type": "integer"
													},
													"inputQueueCount": {
														"type": "integer"
													},
													"inputQueueDrops": {
														"type": "integer"
													},
													"inputQueueFlushes": {
														"type": "integer"
													},
													"inputQueueMaxDepth": {
														"type": "integer"
													},
													"inputRatebps": {
														"type": "integer"
													},
													"operationalStatus": {
														"type": "string"
													},
													"outputDrop": {
														"type": "integer"
													},
													"outputPackets": {
														"type": "integer"
													},
													"outputQueueCount": {
														"type": "integer"
													},
													"outputQueueDepth": {
														"type": "integer"
													},
													"outputRatebps": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"interfaceStatsCollection": {
												"type": "string"
											},
											"interfaceStatsCollectionFailureReason": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"pathOverlayInfo": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"controlPlane": {
															"type": "string"
														},
														"dataPacketEncapsulation": {
															"type": "string"
														},
														"destIp": {
															"type": "string"
														},
														"destPort": {
															"type": "string"
														},
														"protocol": {
															"type": "string"
														},
														"sourceIp": {
															"type": "string"
														},
														"sourcePort": {
															"type": "string"
														},
														"vxlanInfo": {
															"type": "object",
															"properties": {
																"dscp": {
																	"type": "string"
																},
																"vnid": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"qosStatistics": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"classMapName": {
															"type": "string"
														},
														"dropRate": {
															"type": "integer"
														},
														"numBytes": {
															"type": "integer"
														},
														"numPackets": {
															"type": "integer"
														},
														"offeredRate": {
															"type": "integer"
														},
														"queueBandwidthbps": {
															"type": "string"
														},
														"queueDepth": {
															"type": "integer"
														},
														"queueNoBufferDrops": {
															"type": "integer"
														},
														"queueTotalDrops": {
															"type": "integer"
														},
														"refreshedAt": {
															"type": "integer"
														}
													}
												}
											},
											"qosStatsCollection": {
												"type": "string"
											},
											"qosStatsCollectionFailureReason": {
												"type": "string"
											},
											"usedVlan": {
												"type": "string"
											},
											"vrfName": {
												"type": "string"
											}
										}
									},
									"egressVirtualInterface": {
										"type": "object",
										"properties": {
											"aclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"id": {
												"type": "string"
											},
											"interfaceStatistics": {
												"type": "object",
												"properties": {
													"adminStatus": {
														"type": "string"
													},
													"inputPackets": {
														"type": "integer"
													},
													"inputQueueCount": {
														"type": "integer"
													},
													"inputQueueDrops": {
														"type": "integer"
													},
													"inputQueueFlushes": {
														"type": "integer"
													},
													"inputQueueMaxDepth": {
														"type": "integer"
													},
													"inputRatebps": {
														"type": "integer"
													},
													"operationalStatus": {
														"type": "string"
													},
													"outputDrop": {
														"type": "integer"
													},
													"outputPackets": {
														"type": "integer"
													},
													"outputQueueCount": {
														"type": "integer"
													},
													"outputQueueDepth": {
														"type": "integer"
													},
													"outputRatebps": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"interfaceStatsCollection": {
												"type": "string"
											},
											"interfaceStatsCollectionFailureReason": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"pathOverlayInfo": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"controlPlane": {
															"type": "string"
														},
														"dataPacketEncapsulation": {
															"type": "string"
														},
														"destIp": {
															"type": "string"
														},
														"destPort": {
															"type": "string"
														},
														"protocol": {
															"type": "string"
														},
														"sourceIp": {
															"type": "string"
														},
														"sourcePort": {
															"type": "string"
														},
														"vxlanInfo": {
															"type": "object",
															"properties": {
																"dscp": {
																	"type": "string"
																},
																"vnid": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"qosStatistics": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"classMapName": {
															"type": "string"
														},
														"dropRate": {
															"type": "integer"
														},
														"numBytes": {
															"type": "integer"
														},
														"numPackets": {
															"type": "integer"
														},
														"offeredRate": {
															"type": "integer"
														},
														"queueBandwidthbps": {
															"type": "string"
														},
														"queueDepth": {
															"type": "integer"
														},
														"queueNoBufferDrops": {
															"type": "integer"
														},
														"queueTotalDrops": {
															"type": "integer"
														},
														"refreshedAt": {
															"type": "integer"
														}
													}
												}
											},
											"qosStatsCollection": {
												"type": "string"
											},
											"qosStatsCollectionFailureReason": {
												"type": "string"
											},
											"usedVlan": {
												"type": "string"
											},
											"vrfName": {
												"type": "string"
											}
										}
									},
									"flexConnect": {
										"type": "object",
										"properties": {
											"authentication": {
												"type": "string",
												"enum": [
													"LOCAL",
													"CENTRAL"
												]
											},
											"dataSwitching": {
												"type": "string",
												"enum": [
													"LOCAL",
													"CENTRAL"
												]
											},
											"egressAclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"ingressAclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"wirelessLanControllerId": {
												"type": "string"
											},
											"wirelessLanControllerName": {
												"type": "string"
											}
										}
									},
									"id": {
										"type": "string"
									},
									"ingressPhysicalInterface": {
										"type": "object",
										"properties": {
											"aclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"id": {
												"type": "string"
											},
											"interfaceStatistics": {
												"type": "object",
												"properties": {
													"adminStatus": {
														"type": "string"
													},
													"inputPackets": {
														"type": "integer"
													},
													"inputQueueCount": {
														"type": "integer"
													},
													"inputQueueDrops": {
														"type": "integer"
													},
													"inputQueueFlushes": {
														"type": "integer"
													},
													"inputQueueMaxDepth": {
														"type": "integer"
													},
													"inputRatebps": {
														"type": "integer"
													},
													"operationalStatus": {
														"type": "string"
													},
													"outputDrop": {
														"type": "integer"
													},
													"outputPackets": {
														"type": "integer"
													},
													"outputQueueCount": {
														"type": "integer"
													},
													"outputQueueDepth": {
														"type": "integer"
													},
													"outputRatebps": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"interfaceStatsCollection": {
												"type": "string"
											},
											"interfaceStatsCollectionFailureReason": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"pathOverlayInfo": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"controlPlane": {
															"type": "string"
														},
														"dataPacketEncapsulation": {
															"type": "string"
														},
														"destIp": {
															"type": "string"
														},
														"destPort": {
															"type": "string"
														},
														"protocol": {
															"type": "string"
														},
														"sourceIp": {
															"type": "string"
														},
														"sourcePort": {
															"type": "string"
														},
														"vxlanInfo": {
															"type": "object",
															"properties": {
																"dscp": {
																	"type": "string"
																},
																"vnid": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"qosStatistics": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"classMapName": {
															"type": "string"
														},
														"dropRate": {
															"type": "integer"
														},
														"numBytes": {
															"type": "integer"
														},
														"numPackets": {
															"type": "integer"
														},
														"offeredRate": {
															"type": "integer"
														},
														"queueBandwidthbps": {
															"type": "string"
														},
														"queueDepth": {
															"type": "integer"
														},
														"queueNoBufferDrops": {
															"type": "integer"
														},
														"queueTotalDrops": {
															"type": "integer"
														},
														"refreshedAt": {
															"type": "integer"
														}
													}
												}
											},
											"qosStatsCollection": {
												"type": "string"
											},
											"qosStatsCollectionFailureReason": {
												"type": "string"
											},
											"usedVlan": {
												"type": "string"
											},
											"vrfName": {
												"type": "string"
											}
										}
									},
									"ingressVirtualInterface": {
										"type": "object",
										"properties": {
											"aclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"id": {
												"type": "string"
											},
											"interfaceStatistics": {
												"type": "object",
												"properties": {
													"adminStatus": {
														"type": "string"
													},
													"inputPackets": {
														"type": "integer"
													},
													"inputQueueCount": {
														"type": "integer"
													},
													"inputQueueDrops": {
														"type": "integer"
													},
													"inputQueueFlushes": {
														"type": "integer"
													},
													"inputQueueMaxDepth": {
														"type": "integer"
													},
													"inputRatebps": {
														"type": "integer"
													},
													"operationalStatus": {
														"type": "string"
													},
													"outputDrop": {
														"type": "integer"
													},
													"outputPackets": {
														"type": "integer"
													},
													"outputQueueCount": {
														"type": "integer"
													},
													"outputQueueDepth": {
														"type": "integer"
													},
													"outputRatebps": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"interfaceStatsCollection": {
												"type": "string"
											},
											"interfaceStatsCollectionFailureReason": {
												"type": "string"
											},
											"name": {
												"type": "string"
											},
											"pathOverlayInfo": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"controlPlane": {
															"type": "string"
														},
														"dataPacketEncapsulation": {
															"type": "string"
														},
														"destIp": {
															"type": "string"
														},
														"destPort": {
															"type": "string"
														},
														"protocol": {
															"type": "string"
														},
														"sourceIp": {
															"type": "string"
														},
														"sourcePort": {
															"type": "string"
														},
														"vxlanInfo": {
															"type": "object",
															"properties": {
																"dscp": {
																	"type": "string"
																},
																"vnid": {
																	"type": "string"
																}
															}
														}
													}
												}
											},
											"qosStatistics": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"classMapName": {
															"type": "string"
														},
														"dropRate": {
															"type": "integer"
														},
														"numBytes": {
															"type": "integer"
														},
														"numPackets": {
															"type": "integer"
														},
														"offeredRate": {
															"type": "integer"
														},
														"queueBandwidthbps": {
															"type": "string"
														},
														"queueDepth": {
															"type": "integer"
														},
														"queueNoBufferDrops": {
															"type": "integer"
														},
														"queueTotalDrops": {
															"type": "integer"
														},
														"refreshedAt": {
															"type": "integer"
														}
													}
												}
											},
											"qosStatsCollection": {
												"type": "string"
											},
											"qosStatsCollectionFailureReason": {
												"type": "string"
											},
											"usedVlan": {
												"type": "string"
											},
											"vrfName": {
												"type": "string"
											}
										}
									},
									"ip": {
										"type": "string"
									},
									"linkInformationSource": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"perfMonCollection": {
										"type": "string"
									},
									"perfMonCollectionFailureReason": {
										"type": "string"
									},
									"perfMonStatistics": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"byteRate": {
													"type": "integer"
												},
												"destIpAddress": {
													"type": "string"
												},
												"destPort": {
													"type": "string"
												},
												"inputInterface": {
													"type": "string"
												},
												"ipv4DSCP": {
													"type": "string"
												},
												"ipv4TTL": {
													"type": "integer"
												},
												"outputInterface": {
													"type": "string"
												},
												"packetBytes": {
													"type": "integer"
												},
												"packetCount": {
													"type": "integer"
												},
												"packetLoss": {
													"type": "integer"
												},
												"packetLossPercentage": {
													"type": "number"
												},
												"protocol": {
													"type": "string"
												},
												"refreshedAt": {
													"type": "integer"
												},
												"rtpJitterMax": {
													"type": "integer"
												},
												"rtpJitterMean": {
													"type": "integer"
												},
												"rtpJitterMin": {
													"type": "integer"
												},
												"sourceIpAddress": {
													"type": "string"
												},
												"sourcePort": {
													"type": "string"
												}
											}
										}
									},
									"role": {
										"type": "string"
									},
									"ssid": {
										"type": "string"
									},
									"tunnels": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"type": {
										"type": "string"
									},
									"wlanId": {
										"type": "string"
									}
								}
							}
						},
						"networkElementsInfo": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"accuracyList": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"percent": {
													"type": "integer"
												},
												"reason": {
													"type": "string"
												}
											}
										}
									},
									"detailedStatus": {
										"type": "object",
										"properties": {
											"aclTraceCalculation": {
												"type": "string"
											},
											"aclTraceCalculationFailureReason": {
												"type": "string"
											}
										}
									},
									"deviceStatistics": {
										"type": "object",
										"properties": {
											"cpuStatistics": {
												"type": "object",
												"properties": {
													"fiveMinUsageInPercentage": {
														"type": "number"
													},
													"fiveSecsUsageInPercentage": {
														"type": "number"
													},
													"oneMinUsageInPercentage": {
														"type": "number"
													},
													"refreshedAt": {
														"type": "integer"
													}
												}
											},
											"memoryStatistics": {
												"type": "object",
												"properties": {
													"memoryUsage": {
														"type": "integer"
													},
													"refreshedAt": {
														"type": "integer"
													},
													"totalMemory": {
														"type": "integer"
													}
												}
											}
										}
									},
									"deviceStatsCollection": {
										"type": "string"
									},
									"deviceStatsCollectionFailureReason": {
										"type": "string"
									},
									"egressInterface": {
										"type": "object",
										"properties": {
											"physicalInterface": {
												"type": "object",
												"properties": {
													"aclAnalysis": {
														"type": "object",
														"properties": {
															"aclName": {
																"type": "string"
															},
															"matchingAces": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"ace": {
																			"type": "string"
																		},
																		"matchingPorts": {
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"ports": {
																						"type": "array",
																						"items": {
																							"type": "object",
																							"properties": {
																								"destPorts": {
																									"type": "array",
																									"items": {
																										"type": "string"
																									}
																								},
																								"sourcePorts": {
																									"type": "array",
																									"items": {
																										"type": "string"
																									}
																								}
																							}
																						}
																					},
																					"protocol": {
																						"type": "string"
																					}
																				}
																			}
																		},
																		"result": {
																			"type": "string"
																		}
																	}
																}
															},
															"result": {
																"type": "string"
															}
														}
													},
													"id": {
														"type": "string"
													},
													"interfaceStatistics": {
														"type": "object",
														"properties": {
															"adminStatus": {
																"type": "string"
															},
															"inputPackets": {
																"type": "integer"
															},
															"inputQueueCount": {
																"type": "integer"
															},
															"inputQueueDrops": {
																"type": "integer"
															},
															"inputQueueFlushes": {
																"type": "integer"
															},
															"inputQueueMaxDepth": {
																"type": "integer"
															},
															"inputRatebps": {
																"type": "integer"
															},
															"operationalStatus": {
																"type": "string"
															},
															"outputDrop": {
																"type": "integer"
															},
															"outputPackets": {
																"type": "integer"
															},
															"outputQueueCount": {
																"type": "integer"
															},
															"outputQueueDepth": {
																"type": "integer"
															},
															"outputRatebps": {
																"type": "integer"
															},
															"refreshedAt": {
																"type": "integer"
															}
														}
													},
													"interfaceStatsCollection": {
														"type": "string"
													},
													"interfaceStatsCollectionFailureReason": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"pathOverlayInfo": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"controlPlane": {
																	"type": "string"
																},
																"dataPacketEncapsulation": {
																	"type": "string"
																},
																"destIp": {
																	"type": "string"
																},
																"destPort": {
																	"type": "string"
																},
																"protocol": {
																	"type": "string"
																},
																"sourceIp": {
																	"type": "string"
																},
																"sourcePort": {
																	"type": "string"
																},
																"vxlanInfo": {
																	"type": "object",
																	"properties": {
																		"dscp": {
																			"type": "string"
																		},
																		"vnid": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													},
													"qosStatistics": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"classMapName": {
																	"type": "string"
																},
																"dropRate": {
																	"type": "integer"
																},
																"numBytes": {
																	"type": "integer"
																},
																"numPackets": {
																	"type": "integer"
																},
																"offeredRate": {
																	"type": "integer"
																},
																"queueBandwidthbps": {
																	"type": "string"
																},
																"queueDepth": {
																	"type": "integer"
																},
																"queueNoBufferDrops": {
																	"type": "integer"
																},
																"queueTotalDrops": {
																	"type": "integer"
																},
																"refreshedAt": {
																	"type": "integer"
																}
															}
														}
													},
													"qosStatsCollection": {
														"type": "string"
													},
													"qosStatsCollectionFailureReason": {
														"type": "string"
													},
													"usedVlan": {
														"type": "string"
													},
													"vrfName": {
														"type": "string"
													}
												}
											},
											"virtualInterface": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"aclAnalysis": {
															"type": "object",
															"properties": {
																"aclName": {
																	"type": "string"
																},
																"matchingAces": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ace": {
																				"type": "string"
																			},
																			"matchingPorts": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"ports": {
																							"type": "array",
																							"items": {
																								"type": "object",
																								"properties": {
																									"destPorts": {
																										"type": "array",
																										"items": {
																											"type": "string"
																										}
																									},
																									"sourcePorts": {
																										"type": "array",
																										"items": {
																											"type": "string"
																										}
																									}
																								}
																							}
																						},
																						"protocol": {
																							"type": "string"
																						}
																					}
																				}
																			},
																			"result": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														},
														"id": {
															"type": "string"
														},
														"interfaceStatistics": {
															"type": "object",
															"properties": {
																"adminStatus": {
																	"type": "string"
																},
																"inputPackets": {
																	"type": "integer"
																},
																"inputQueueCount": {
																	"type": "integer"
																},
																"inputQueueDrops": {
																	"type": "integer"
																},
																"inputQueueFlushes": {
																	"type": "integer"
																},
																"inputQueueMaxDepth": {
																	"type": "integer"
																},
																"inputRatebps": {
																	"type": "integer"
																},
																"operationalStatus": {
																	"type": "string"
																},
																"outputDrop": {
																	"type": "integer"
																},
																"outputPackets": {
																	"type": "integer"
																},
																"outputQueueCount": {
																	"type": "integer"
																},
																"outputQueueDepth": {
																	"type": "integer"
																},
																"outputRatebps": {
																	"type": "integer"
																},
																"refreshedAt": {
																	"type": "integer"
																}
															}
														},
														"interfaceStatsCollection": {
															"type": "string"
														},
														"interfaceStatsCollectionFailureReason": {
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"pathOverlayInfo": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"controlPlane": {
																		"type": "string"
																	},
																	"dataPacketEncapsulation": {
																		"type": "string"
																	},
																	"destIp": {
																		"type": "string"
																	},
																	"destPort": {
																		"type": "string"
																	},
																	"protocol": {
																		"type": "string"
																	},
																	"sourceIp": {
																		"type": "string"
																	},
																	"sourcePort": {
																		"type": "string"
																	},
																	"vxlanInfo": {
																		"type": "object",
																		"properties": {
																			"dscp": {
																				"type": "string"
																			},
																			"vnid": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														},
														"qosStatistics": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"classMapName": {
																		"type": "string"
																	},
																	"dropRate": {
																		"type": "integer"
																	},
																	"numBytes": {
																		"type": "integer"
																	},
																	"numPackets": {
																		"type": "integer"
																	},
																	"offeredRate": {
																		"type": "integer"
																	},
																	"queueBandwidthbps": {
																		"type": "string"
																	},
																	"queueDepth": {
																		"type": "integer"
																	},
																	"queueNoBufferDrops": {
																		"type": "integer"
																	},
																	"queueTotalDrops": {
																		"type": "integer"
																	},
																	"refreshedAt": {
																		"type": "integer"
																	}
																}
															}
														},
														"qosStatsCollection": {
															"type": "string"
														},
														"qosStatsCollectionFailureReason": {
															"type": "string"
														},
														"usedVlan": {
															"type": "string"
														},
														"vrfName": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"flexConnect": {
										"type": "object",
										"properties": {
											"authentication": {
												"type": "string",
												"enum": [
													"LOCAL",
													"CENTRAL"
												]
											},
											"dataSwitching": {
												"type": "string",
												"enum": [
													"LOCAL",
													"CENTRAL"
												]
											},
											"egressAclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"ingressAclAnalysis": {
												"type": "object",
												"properties": {
													"aclName": {
														"type": "string"
													},
													"matchingAces": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"ace": {
																	"type": "string"
																},
																"matchingPorts": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ports": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"destPorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						},
																						"sourcePorts": {
																							"type": "array",
																							"items": {
																								"type": "string"
																							}
																						}
																					}
																				}
																			},
																			"protocol": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														}
													},
													"result": {
														"type": "string"
													}
												}
											},
											"wirelessLanControllerId": {
												"type": "string"
											},
											"wirelessLanControllerName": {
												"type": "string"
											}
										}
									},
									"id": {
										"type": "string"
									},
									"ingressInterface": {
										"type": "object",
										"properties": {
											"physicalInterface": {
												"type": "object",
												"properties": {
													"aclAnalysis": {
														"type": "object",
														"properties": {
															"aclName": {
																"type": "string"
															},
															"matchingAces": {
																"type": "array",
																"items": {
																	"type": "object",
																	"properties": {
																		"ace": {
																			"type": "string"
																		},
																		"matchingPorts": {
																			"type": "array",
																			"items": {
																				"type": "object",
																				"properties": {
																					"ports": {
																						"type": "array",
																						"items": {
																							"type": "object",
																							"properties": {
																								"destPorts": {
																									"type": "array",
																									"items": {
																										"type": "string"
																									}
																								},
																								"sourcePorts": {
																									"type": "array",
																									"items": {
																										"type": "string"
																									}
																								}
																							}
																						}
																					},
																					"protocol": {
																						"type": "string"
																					}
																				}
																			}
																		},
																		"result": {
																			"type": "string"
																		}
																	}
																}
															},
															"result": {
																"type": "string"
															}
														}
													},
													"id": {
														"type": "string"
													},
													"interfaceStatistics": {
														"type": "object",
														"properties": {
															"adminStatus": {
																"type": "string"
															},
															"inputPackets": {
																"type": "integer"
															},
															"inputQueueCount": {
																"type": "integer"
															},
															"inputQueueDrops": {
																"type": "integer"
															},
															"inputQueueFlushes": {
																"type": "integer"
															},
															"inputQueueMaxDepth": {
																"type": "integer"
															},
															"inputRatebps": {
																"type": "integer"
															},
															"operationalStatus": {
																"type": "string"
															},
															"outputDrop": {
																"type": "integer"
															},
															"outputPackets": {
																"type": "integer"
															},
															"outputQueueCount": {
																"type": "integer"
															},
															"outputQueueDepth": {
																"type": "integer"
															},
															"outputRatebps": {
																"type": "integer"
															},
															"refreshedAt": {
																"type": "integer"
															}
														}
													},
													"interfaceStatsCollection": {
														"type": "string"
													},
													"interfaceStatsCollectionFailureReason": {
														"type": "string"
													},
													"name": {
														"type": "string"
													},
													"pathOverlayInfo": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"controlPlane": {
																	"type": "string"
																},
																"dataPacketEncapsulation": {
																	"type": "string"
																},
																"destIp": {
																	"type": "string"
																},
																"destPort": {
																	"type": "string"
																},
																"protocol": {
																	"type": "string"
																},
																"sourceIp": {
																	"type": "string"
																},
																"sourcePort": {
																	"type": "string"
																},
																"vxlanInfo": {
																	"type": "object",
																	"properties": {
																		"dscp": {
																			"type": "string"
																		},
																		"vnid": {
																			"type": "string"
																		}
																	}
																}
															}
														}
													},
													"qosStatistics": {
														"type": "array",
														"items": {
															"type": "object",
															"properties": {
																"classMapName": {
																	"type": "string"
																},
																"dropRate": {
																	"type": "integer"
																},
																"numBytes": {
																	"type": "integer"
																},
																"numPackets": {
																	"type": "integer"
																},
																"offeredRate": {
																	"type": "integer"
																},
																"queueBandwidthbps": {
																	"type": "string"
																},
																"queueDepth": {
																	"type": "integer"
																},
																"queueNoBufferDrops": {
																	"type": "integer"
																},
																"queueTotalDrops": {
																	"type": "integer"
																},
																"refreshedAt": {
																	"type": "integer"
																}
															}
														}
													},
													"qosStatsCollection": {
														"type": "string"
													},
													"qosStatsCollectionFailureReason": {
														"type": "string"
													},
													"usedVlan": {
														"type": "string"
													},
													"vrfName": {
														"type": "string"
													}
												}
											},
											"virtualInterface": {
												"type": "array",
												"items": {
													"type": "object",
													"properties": {
														"aclAnalysis": {
															"type": "object",
															"properties": {
																"aclName": {
																	"type": "string"
																},
																"matchingAces": {
																	"type": "array",
																	"items": {
																		"type": "object",
																		"properties": {
																			"ace": {
																				"type": "string"
																			},
																			"matchingPorts": {
																				"type": "array",
																				"items": {
																					"type": "object",
																					"properties": {
																						"ports": {
																							"type": "array",
																							"items": {
																								"type": "object",
																								"properties": {
																									"destPorts": {
																										"type": "array",
																										"items": {
																											"type": "string"
																										}
																									},
																									"sourcePorts": {
																										"type": "array",
																										"items": {
																											"type": "string"
																										}
																									}
																								}
																							}
																						},
																						"protocol": {
																							"type": "string"
																						}
																					}
																				}
																			},
																			"result": {
																				"type": "string"
																			}
																		}
																	}
																},
																"result": {
																	"type": "string"
																}
															}
														},
														"id": {
															"type": "string"
														},
														"interfaceStatistics": {
															"type": "object",
															"properties": {
																"adminStatus": {
																	"type": "string"
																},
																"inputPackets": {
																	"type": "integer"
																},
																"inputQueueCount": {
																	"type": "integer"
																},
																"inputQueueDrops": {
																	"type": "integer"
																},
																"inputQueueFlushes": {
																	"type": "integer"
																},
																"inputQueueMaxDepth": {
																	"type": "integer"
																},
																"inputRatebps": {
																	"type": "integer"
																},
																"operationalStatus": {
																	"type": "string"
																},
																"outputDrop": {
																	"type": "integer"
																},
																"outputPackets": {
																	"type": "integer"
																},
																"outputQueueCount": {
																	"type": "integer"
																},
																"outputQueueDepth": {
																	"type": "integer"
																},
																"outputRatebps": {
																	"type": "integer"
																},
																"refreshedAt": {
																	"type": "integer"
																}
															}
														},
														"interfaceStatsCollection": {
															"type": "string"
														},
														"interfaceStatsCollectionFailureReason": {
															"type": "string"
														},
														"name": {
															"type": "string"
														},
														"pathOverlayInfo": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"controlPlane": {
																		"type": "string"
																	},
																	"dataPacketEncapsulation": {
																		"type": "string"
																	},
																	"destIp": {
																		"type": "string"
																	},
																	"destPort": {
																		"type": "string"
																	},
																	"protocol": {
																		"type": "string"
																	},
																	"sourceIp": {
																		"type": "string"
																	},
																	"sourcePort": {
																		"type": "string"
																	},
																	"vxlanInfo": {
																		"type": "object",
																		"properties": {
																			"dscp": {
																				"type": "string"
																			},
																			"vnid": {
																				"type": "string"
																			}
																		}
																	}
																}
															}
														},
														"qosStatistics": {
															"type": "array",
															"items": {
																"type": "object",
																"properties": {
																	"classMapName": {
																		"type": "string"
																	},
																	"dropRate": {
																		"type": "integer"
																	},
																	"numBytes": {
																		"type": "integer"
																	},
																	"numPackets": {
																		"type": "integer"
																	},
																	"offeredRate": {
																		"type": "integer"
																	},
																	"queueBandwidthbps": {
																		"type": "string"
																	},
																	"queueDepth": {
																		"type": "integer"
																	},
																	"queueNoBufferDrops": {
																		"type": "integer"
																	},
																	"queueTotalDrops": {
																		"type": "integer"
																	},
																	"refreshedAt": {
																		"type": "integer"
																	}
																}
															}
														},
														"qosStatsCollection": {
															"type": "string"
														},
														"qosStatsCollectionFailureReason": {
															"type": "string"
														},
														"usedVlan": {
															"type": "string"
														},
														"vrfName": {
															"type": "string"
														}
													}
												}
											}
										}
									},
									"ip": {
										"type": "string"
									},
									"linkInformationSource": {
										"type": "string"
									},
									"name": {
										"type": "string"
									},
									"perfMonCollection": {
										"type": "string"
									},
									"perfMonCollectionFailureReason": {
										"type": "string"
									},
									"perfMonitorStatistics": {
										"type": "array",
										"items": {
											"type": "object",
											"properties": {
												"byteRate": {
													"type": "integer"
												},
												"destIpAddress": {
													"type": "string"
												},
												"destPort": {
													"type": "string"
												},
												"inputInterface": {
													"type": "string"
												},
												"ipv4DSCP": {
													"type": "string"
												},
												"ipv4TTL": {
													"type": "integer"
												},
												"outputInterface": {
													"type": "string"
												},
												"packetBytes": {
													"type": "integer"
												},
												"packetCount": {
													"type": "integer"
												},
												"packetLoss": {
													"type": "integer"
												},
												"packetLossPercentage": {
													"type": "number"
												},
												"protocol": {
													"type": "string"
												},
												"refreshedAt": {
													"type": "integer"
												},
												"rtpJitterMax": {
													"type": "integer"
												},
												"rtpJitterMean": {
													"type": "integer"
												},
												"rtpJitterMin": {
													"type": "integer"
												},
												"sourceIpAddress": {
													"type": "string"
												},
												"sourcePort": {
													"type": "string"
												}
											}
										}
									},
									"role": {
										"type": "string"
									},
									"ssid": {
										"type": "string"
									},
									"tunnels": {
										"type": "array",
										"items": {
											"type": "string"
										}
									},
									"type": {
										"type": "string"
									},
									"wlanId": {
										"type": "string"
									}
								}
							}
						},
						"properties": {
							"type": "array",
							"items": {
								"type": "string"
							}
						},
						"request": {
							"type": "object",
							"properties": {
								"controlPath": {
									"type": "boolean"
								},
								"createTime": {
									"type": "integer"
								},
								"destIP": {
									"type": "string"
								},
								"destPort": {
									"type": "string"
								},
								"failureReason": {
									"type": "string"
								},
								"id": {
									"type": "string"
								},
								"inclusions": {
									"type": "array",
									"items": {
										"type": "string"
									}
								},
								"lastUpdateTime": {
									"type": "integer"
								},
								"periodicRefresh": {
									"type": "boolean"
								},
								"protocol": {
									"type": "string"
								},
								"sourceIP": {
									"type": "string"
								},
								"sourcePort": {
									"type": "string"
								},
								"status": {
									"type": "string"
								}
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"DeleteWorkflowResponse": {
			"type": "object"
		},
		"GenerateTokenRequest": {
			"type": "object",
			"properties": {
				"Token": {
					"type": "string"
				}
			}
		},
		"GenerateTokenResponse": {
			"type": "object",
			"properties": {
				"Token": {
					"type": "string"
				}
			}
		},
		"ImportManyDevicesResponse": {
			"type": "object"
		},
		"GlobalCredentialListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"comments": {
								"type": "string"
							},
							"credentialType": {
								"type": "string",
								"enum": [
									"GLOBAL",
									"APP"
								]
							},
							"description": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"instanceTenantId": {
								"type": "string"
							},
							"instanceUuid": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"SystemPropertyNameAndIntValueDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"id": {
						"type": "string"
					},
					"instanceTenantId": {
						"type": "string"
					},
					"instanceUuid": {
						"type": "string"
					},
					"intValue": {
						"type": "integer"
					},
					"systemPropertyName": {
						"type": "string"
					}
				}
			}
		},
		"VlanListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"interfaceName": {
								"type": "string"
							},
							"ipAddress": {
								"type": "string"
							},
							"mask": {
								"type": "integer"
							},
							"networkAddress": {
								"type": "string"
							},
							"numberOfIPs": {
								"type": "integer"
							},
							"prefix": {
								"type": "string"
							},
							"vlanNumber": {
								"type": "integer"
							},
							"vlanType": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NetworkDeviceSyncApiRequest": {
			"type": "array",
			"items": {
				"type": "object"
			}
		},
		"ModuleListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"assemblyNumber": {
								"type": "string"
							},
							"assemblyRevision": {
								"type": "string"
							},
							"attributeInfo": {
								"type": "object",
								"properties": {}
							},
							"containmentEntity": {
								"type": "string"
							},
							"description": {
								"type": "string"
							},
							"entityPhysicalIndex": {
								"type": "string"
							},
							"id": {
								"type": "string"
							},
							"isFieldReplaceable": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"TRUE",
									"FALSE",
									"NOT_APPLICABLE"
								]
							},
							"isReportingAlarmsAllowed": {
								"type": "string",
								"enum": [
									"UNKNOWN",
									"TRUE",
									"FALSE",
									"NOT_APPLICABLE"
								]
							},
							"manufacturer": {
								"type": "string"
							},
							"moduleIndex": {
								"type": "integer"
							},
							"name": {
								"type": "string"
							},
							"operationalStateCode": {
								"type": "string"
							},
							"partNumber": {
								"type": "string"
							},
							"serialNumber": {
								"type": "string"
							},
							"vendorEquipmentType": {
								"type": "string"
							}
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"FunctionalCapabilityResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"attributeInfo": {
							"type": "object",
							"properties": {}
						},
						"functionDetails": {
							"type": "array",
							"items": {
								"type": "object",
								"properties": {
									"attributeInfo": {
										"type": "object",
										"properties": {}
									},
									"id": {
										"type": "string"
									},
									"propertyName": {
										"type": "string"
									},
									"stringValue": {
										"type": "string"
									}
								}
							}
						},
						"functionName": {
							"type": "string"
						},
						"functionOpState": {
							"type": "string",
							"enum": [
								"UNKNOWN",
								"NOT_APPLICABLE",
								"DISABLED",
								"ENABLED"
							]
						},
						"id": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"InventoryRequest": {
			"type": "object",
			"properties": {
				"cdpLevel": {
					"type": "integer"
				},
				"discoveryType": {
					"type": "string"
				},
				"enablePasswordList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"globalCredentialIdList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"httpReadCredential": {
					"type": "object",
					"properties": {
						"comments": {
							"type": "string"
						},
						"credentialType": {
							"type": "string",
							"enum": [
								"GLOBAL",
								"APP"
							]
						},
						"description": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"secure": {
							"type": "boolean"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"httpWriteCredential": {
					"type": "object",
					"properties": {
						"comments": {
							"type": "string"
						},
						"credentialType": {
							"type": "string",
							"enum": [
								"GLOBAL",
								"APP"
							]
						},
						"description": {
							"type": "string"
						},
						"id": {
							"type": "string"
						},
						"instanceTenantId": {
							"type": "string"
						},
						"instanceUuid": {
							"type": "string"
						},
						"password": {
							"type": "string"
						},
						"port": {
							"type": "integer"
						},
						"secure": {
							"type": "boolean"
						},
						"username": {
							"type": "string"
						}
					}
				},
				"ipAddressList": {
					"type": "string"
				},
				"ipFilterList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"lldpLevel": {
					"type": "integer"
				},
				"name": {
					"type": "string"
				},
				"netconfPort": {
					"type": "string"
				},
				"noAddNewDevice": {
					"type": "boolean"
				},
				"parentDiscoveryId": {
					"type": "string"
				},
				"passwordList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"preferredMgmtIPMethod": {
					"type": "string"
				},
				"protocolOrder": {
					"type": "string"
				},
				"reDiscovery": {
					"type": "boolean"
				},
				"retry": {
					"type": "integer"
				},
				"snmpAuthPassphrase": {
					"type": "string"
				},
				"snmpAuthProtocol": {
					"type": "string"
				},
				"snmpMode": {
					"type": "string"
				},
				"snmpPrivPassphrase": {
					"type": "string"
				},
				"snmpPrivProtocol": {
					"type": "string"
				},
				"snmpROCommunity": {
					"type": "string"
				},
				"snmpROCommunityDesc": {
					"type": "string"
				},
				"snmpRWCommunity": {
					"type": "string"
				},
				"snmpRWCommunityDesc": {
					"type": "string"
				},
				"snmpUserName": {
					"type": "string"
				},
				"snmpVersion": {
					"type": "string"
				},
				"timeout": {
					"type": "integer"
				},
				"updateMgmtIp": {
					"type": "boolean"
				},
				"userNameList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"FlowAnalysisRequest": {
			"type": "object",
			"properties": {
				"controlPath": {
					"type": "boolean"
				},
				"destIP": {
					"type": "string"
				},
				"destPort": {
					"type": "string"
				},
				"inclusions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"periodicRefresh": {
					"type": "boolean"
				},
				"protocol": {
					"type": "string"
				},
				"sourceIP": {
					"type": "string"
				},
				"sourcePort": {
					"type": "string"
				}
			}
		},
		"FlowAnalysisRequestResultOutput": {
			"type": "object",
			"properties": {
				"response": {
					"type": "object",
					"properties": {
						"flowAnalysisId": {
							"type": "string"
						},
						"taskId": {
							"type": "string"
						},
						"url": {
							"type": "string"
						}
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"NameSpaceListResult": {
			"type": "object",
			"properties": {
				"response": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
				"version": {
					"type": "string"
				}
			}
		},
		"ImageImportFromUrlDTO": {
			"type": "array",
			"items": {
				"type": "object",
				"properties": {
					"applicationType": {
						"type": "string"
					},
					"imageFamily": {
						"type": "string"
					},
					"sourceURL": {
						"type": "string"
					},
					"thirdParty": {
						"type": "boolean"
					},
					"vendor": {
						"type": "string"
					}
				}
			}
		},
		"PushProvisionRequest": {
			"type": "object",
			"properties": {
				"deviceIdList": {
					"type": "array",
					"items": {
						"type": "string"
					}
				}
			}
		},
		"ProvisionDeviceResponse": {
			"type": "object"
		},
		"ClaimDeviceRequest": {
			"type": "object",
			"properties": {
				"configFileUrl": {
					"type": "string"
				},
				"configId": {
					"type": "string"
				},
				"deviceClaimList": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"configList": {
								"type": "array",
								"items": {
									"type": "object",
									"properties": {
										"configId": {
											"type": "string"
										},
										"configParameters": {
											"type": "array",
											"items": {
												"type": "object",
												"properties": {
													"key": {
														"type": "string"
													},
													"value": {
														"type": "string"
													}
												}
											}
										}
									}
								}
							},
							"deviceId": {
								"type": "string"
							},
							"licenseLevel": {
								"type": "string"
							},
							"licenseType": {
								"type": "string"
							},
							"topOfStackSerialNumber": {
								"type": "string"
							}
						}
					}
				},
				"fileServiceId": {
					"type": "string"
				},
				"imageId": {
					"type": "string"
				},
				"imageUrl": {
					"type": "string"
				},
				"projectId": {
					"type": "string"
				},
				"workflowId": {
					"type": "string"
				}
			}
		},
		"ClaimDevicesResponse": {
			"type": "object"
		},
		"GetWorkflowResponse": {
			"type": "object"
		},
		"DeleteDeviceResponse": {
			"type": "object"
		},
		"GetVirtualAccountListResponse": {
			"type": "object"
		},
		"CollectionProjectDTO": {
			"type": "object"
		},
		"TemplateVersionRequestDTO": {
			"type": "object",
			"properties": {
				"comments": {
					"type": "string"
				},
				"templateId": {
					"type": "string"
				}
			}
		},
		"CreateSSIDRequest": {
			"type": "object",
			"properties": {
				"interfaceName": {
					"type": "string"
				},
				"vlanId": {
					"type": "number"
				},
				"ssidName": {
					"type": "string"
				},
				"wlanType": {
					"type": "string"
				},
				"authenticationType": {
					"type": "string",
					"enum": [
						"wpa2_enterprise",
						"wpa2_personal",
						"open"
					]
				},
				"authenticationServer": {
					"type": "string"
				},
				"passpharse": {
					"type": "string"
				},
				"trafficType": {
					"type": "string",
					"enum": [
						"voicedata",
						"data"
					]
				},
				"radioPolicy": {
					"type": "string",
					"enum": [
						"0",
						"1"
					]
				},
				"fastTransition": {
					"type": "string",
					"enum": [
						"ADAPTIVE",
						"ENABLE",
						"DISABLE"
					]
				},
				"enableFastlane": {
					"type": "boolean"
				},
				"enableMACFilering": {
					"type": "boolean"
				},
				"enableBroadcastSSID": {
					"type": "boolean"
				},
				"enableWLANBandSelection": {
					"type": "boolean"
				},
				"wirelessNetworkProfileName": {
					"type": "string"
				},
				"sitesNameHierarchyToMapTheProfile": {
					"type": "string"
				},
				"deviceName": {
					"type": "string"
				},
				"siteNameHierarchyToMapDevicePhysicalLocation": {
					"type": "string"
				},
				"managedAPLocations": {
					"type": "string"
				},
				"interfaceIPAddress": {
					"type": "string"
				},
				"interfaceNetMaskInCIDRFormat": {
					"type": "string"
				},
				"interfaceGatewayIPAddress": {
					"type": "string"
				},
				"interfaceLAGPortNumber": {
					"type": "number"
				},
				"siteNameHierarchyToMapAPPhysicalLocation": {
					"type": "string"
				},
				"apNames": {
					"type": "string"
				},
				"rfProfile": {
					"type": "string",
					"enum": [
						"LOW",
						"TYPICAL",
						"HIGH"
					]
				}
			}
		},
		"CreateSSIDResponse": {
			"type": "object",
			"properties": {
				"isError": {
					"type": "boolean"
				},
				"failureReason": {
					"type": "string"
				},
				"successMessage": {
					"type": "string"
				}
			}
		}
	}
}